import logging
import xml.etree.ElementTree as ET
from xml.dom import minidom
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class Product:
    def __init__(self):
        self.id = ""
        self.title = ""
        self.description = ""
        self.price = ""
        self.category = ""
        self.condition = ""
        self.ad_type = ""
        self.images = []
        self.address = ""
        self.contact_phone = ""


class AvitoXMLBot:
    def __init__(self):
        self.users_products = {}
        self.current_step = {}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id

        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è XML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ê–≤–∏—Ç–æ!

–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ê–≤–∏—Ç–æ
‚Ä¢ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π XML —Ñ–∞–π–ª
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/new_product - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
/my_products - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
/generate_xml - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å XML —Ñ–∞–π–ª
/help - –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
        """

        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ

2. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤:
   ‚Ä¢ /my_products - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
   ‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞

3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML:
   ‚Ä¢ /generate_xml - —Å–æ–∑–¥–∞—Ç—å XML —Ñ–∞–π–ª
   ‚Ä¢ –§–∞–π–ª –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ê–≤–∏—Ç–æ

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –¶–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä—É–±–ª—è—Ö
‚Ä¢ –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX
        """
        await update.message.reply_text(help_text)

    async def new_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        user_id = update.effective_user.id

        if user_id not in self.users_products:
            self.users_products[user_id] = []

        self.current_step[user_id] = 'start'
        self.users_products[user_id].append(Product())

        await update.message.reply_text(
            "üéØ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä):"
        )
        self.current_step[user_id] = 'id'

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text

        if user_id not in self.current_step:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            return

        if user_id not in self.users_products or not self.users_products[user_id]:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            del self.current_step[user_id]
            return

        current_product = self.users_products[user_id][-1]

        if self.current_step[user_id] == 'id':
            current_product.id = text
            self.current_step[user_id] = 'title'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

        elif self.current_step[user_id] == 'title':
            current_product.title = text
            self.current_step[user_id] = 'description'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

        elif self.current_step[user_id] == 'description':
            current_product.description = text
            self.current_step[user_id] = 'price'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")

        elif self.current_step[user_id] == 'price':
            if not text.isdigit():
                await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")
                return
            current_product.price = text
            self.current_step[user_id] = 'category'
            await self.show_categories(update)

        elif self.current_step[user_id] == 'address':
            current_product.address = text
            self.current_step[user_id] = 'phone'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")

        elif self.current_step[user_id] == 'phone':
            if not text.startswith('+7') or len(text) != 12 or not text[1:].isdigit():
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
                return
            current_product.contact_phone = text
            self.current_step[user_id] = 'images'
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏). "
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /finish_images"
            )

        elif self.current_step[user_id] == 'images':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_links = [link.strip() for link in text.split('\n') if link.strip()]
            current_product.images.extend(image_links)

            await update.message.reply_text(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(image_links)} —Å—Å—ã–ª–æ–∫. –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(current_product.images)}\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /finish_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
            )

    async def show_categories(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        categories = list(config.AVITO_CONFIG['categories'].keys())

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ø–æ 2 –≤ —Ä—è–¥—É)
        keyboard = []
        for i in range(0, len(categories), 2):
            row = categories[i:i + 2]
            keyboard.append([InlineKeyboardButton(cat, callback_data=f"cat_{cat}") for cat in row])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

    async def show_conditions(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–∞"""
        conditions = list(config.AVITO_CONFIG['conditions'].keys())

        keyboard = [[InlineKeyboardButton(cond, callback_data=f"cond_{cond}")] for cond in conditions]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)

    async def show_ad_types(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        ad_types = list(config.AVITO_CONFIG['ad_types'].keys())

        keyboard = [[InlineKeyboardButton(ad_type, callback_data=f"type_{ad_type}")] for ad_type in ad_types]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        data = query.data

        if user_id not in self.users_products or not self.users_products[user_id]:
            await query.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return

        current_product = self.users_products[user_id][-1]

        if data.startswith('cat_'):
            category_name = data[4:]
            current_product.category = str(config.AVITO_CONFIG['categories'][category_name])
            self.current_step[user_id] = 'condition'
            await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category_name}")
            await self.show_conditions_from_query(query)

        elif data.startswith('cond_'):
            condition_name = data[5:]
            current_product.condition = config.AVITO_CONFIG['conditions'][condition_name]
            self.current_step[user_id] = 'ad_type'
            await query.edit_message_text(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: {condition_name}")
            await self.show_ad_types_from_query(query)

        elif data.startswith('type_'):
            ad_type_name = data[5:]
            current_product.ad_type = config.AVITO_CONFIG['ad_types'][ad_type_name]
            self.current_step[user_id] = 'address'
            await query.edit_message_text(f"–¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω: {ad_type_name}")
            await context.bot.send_message(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")

    async def show_conditions_from_query(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ callback query"""
        conditions = list(config.AVITO_CONFIG['conditions'].keys())
        keyboard = [[InlineKeyboardButton(cond, callback_data=f"cond_{cond}")] for cond in conditions]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)

    async def show_ad_types_from_query(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ callback query"""
        ad_types = list(config.AVITO_CONFIG['ad_types'].keys())
        keyboard = [[InlineKeyboardButton(ad_type, callback_data=f"type_{ad_type}")] for ad_type in ad_types]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    async def finish_images(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user_id = update.effective_user.id

        if user_id in self.current_step and self.current_step[user_id] == 'images':
            if user_id in self.users_products and self.users_products[user_id]:
                current_product = self.users_products[user_id][-1]

                if not current_product.images:
                    await update.message.reply_text(
                        "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                else:
                    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(current_product.images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

                # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                del self.current_step[user_id]

                await update.message.reply_text(
                    f"‚úÖ –¢–æ–≤–∞—Ä '{current_product.title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_products —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate_xml —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å XML —Ñ–∞–π–ª"
                )
            else:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                if user_id in self.current_step:
                    del self.current_step[user_id]

    async def my_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id

        if user_id not in self.users_products or not self.users_products[user_id]:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
            return

        products = self.users_products[user_id]
        text = f"üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã ({len(products)}):\n\n"

        for i, product in enumerate(products, 1):
            text += f"{i}. {product.title}\n"
            text += f"   ID: {product.id}\n"
            text += f"   –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            text += f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(product.images)}\n"
            text += "   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_product [–Ω–æ–º–µ—Ä] —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate_xml —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å XML —Ñ–∞–π–ª"

        await update.message.reply_text(text)

    async def delete_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –Ω–æ–º–µ—Ä—É"""
        user_id = update.effective_user.id

        if user_id not in self.users_products or not self.users_products[user_id]:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete_product [–Ω–æ–º–µ—Ä]")
            return

        try:
            index = int(context.args[0]) - 1
            if 0 <= index < len(self.users_products[user_id]):
                deleted_product = self.users_products[user_id].pop(index)
                await update.message.reply_text(f"–¢–æ–≤–∞—Ä '{deleted_product.title}' —É–¥–∞–ª–µ–Ω.")

                if not self.users_products[user_id]:
                    await update.message.reply_text(
                        "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
        except ValueError:
            await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    async def generate_xml(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML —Ñ–∞–π–ª–∞"""
        user_id = update.effective_user.id

        if user_id not in self.users_products or not self.users_products[user_id]:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
            root = ET.Element("Ads", formatVersion="3", target="Avito.ru")

            for product in self.users_products[user_id]:
                ad = ET.SubElement(root, "Ad")

                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                ET.SubElement(ad, "Id").text = product.id
                ET.SubElement(ad, "Title").text = product.title
                ET.SubElement(ad, "Description").text = product.description
                ET.SubElement(ad, "Price").text = product.price
                ET.SubElement(ad, "Category").text = product.category
                ET.SubElement(ad, "Address").text = product.address
                ET.SubElement(ad, "ContactPhone").text = product.contact_phone

                # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if product.condition:
                    ET.SubElement(ad, "Condition").text = product.condition
                if product.ad_type:
                    ET.SubElement(ad, "AdType").text = product.ad_type

                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if product.images:
                    images_element = ET.SubElement(ad, "Images")
                    for image_url in product.images[:10]:  # –ê–≤–∏—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        image_elem = ET.SubElement(images_element, "Image")
                        image_elem.set("url", image_url)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML
            rough_string = ET.tostring(root, 'utf-8')
            reparsed = minidom.parseString(rough_string)
            pretty_xml = reparsed.toprettyxml(indent="  ")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"avito_export_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xml"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(pretty_xml)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(filename, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=filename,
                    caption="‚úÖ –í–∞—à XML —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ê–≤–∏—Ç–æ –≥–æ—Ç–æ–≤!\n\n"
                            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ê–≤–∏—Ç–æ "
                            "–≤ —Ä–∞–∑–¥–µ–ª–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
                )

        except Exception as e:
            logger.error(f"Error generating XML: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("new_product", self.new_product))
        application.add_handler(CommandHandler("my_products", self.my_products))
        application.add_handler(CommandHandler("delete_product", self.delete_product))
        application.add_handler(CommandHandler("generate_xml", self.generate_xml))
        application.add_handler(CommandHandler("finish_images", self.finish_images))

        application.add_handler(CallbackQueryHandler(self.button_handler))

        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not config.BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables")
        return

    application = Application.builder().token(config.BOT_TOKEN).build()

    bot = AvitoXMLBot()
    bot.setup_handlers(application)

    logger.info("Bot is starting...")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())