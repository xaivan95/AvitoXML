# bot/handlers/image_handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from typing import Dict, List
from datetime import datetime

from bot.states import ProductStates
from bot.handlers.base import BaseHandler, StateManager


async def _ask_shuffle_images(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –ø–µ—Ä–µ–º–µ—à–∞—Ç—å", callback_data="shuffle_yes")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="shuffle_no")
    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""

    data = await StateManager.get_data_safe(state)
    main_count = len(data.get('main_images', []))
    additional_count = len(data.get('additional_images', []))
    total_count = main_count + additional_count

    await message.answer(
        f"{greeting}–Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å —Ñ–æ—Ç–æ?\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ:\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ: {main_count}\n"
        f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {additional_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_count}\n\n"
        "–ü—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –≤—Å–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.",
        reply_markup=builder.as_markup()
    )


class ImageHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""

    def __init__(self):
        self.temp_main_albums: Dict[str, Dict] = {}
        self.temp_additional_albums: Dict[str, Dict] = {}
        super().__init__()

    def _register_handlers(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.router.message.register(
            self.handle_main_images_album,
            StateFilter(ProductStates.waiting_for_main_images),
            F.media_group_id
        )
        self.router.message.register(
            self.process_main_single_image,
            StateFilter(ProductStates.waiting_for_main_images),
            F.photo
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.router.message.register(
            self.handle_additional_images_album,
            StateFilter(ProductStates.waiting_for_additional_images),
            F.media_group_id
        )
        self.router.message.register(
            self.process_additional_single_image,
            StateFilter(ProductStates.waiting_for_additional_images),
            F.photo
        )

        # –ö–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.router.message.register(
            self.finish_main_images_command,
            Command("finish_main_images")
        )
        self.router.message.register(
            self.finish_additional_images_command,
            Command("finish_additional_images")
        )

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.router.callback_query.register(
            self.process_shuffle_choice,
            F.data.startswith("shuffle_")
        )

    async def handle_main_images_album(self, message: Message, album: List[Message], state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if not album:
            return

        photo_files = []
        for msg in album:
            if msg.photo:
                largest_photo = msg.photo[-1]
                photo_files.append(largest_photo.file_id)

        if photo_files:
            data = await StateManager.get_data_safe(state)
            main_images = data.get('main_images', [])
            main_images.extend(photo_files)

            await StateManager.safe_update(state, main_images=main_images)

            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º —Å {len(photo_files)} –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ–æ—Ç–æ! "
                f"–í—Å–µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(main_images)}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_main_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
            )

    async def process_main_single_image(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if message.media_group_id:
            return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_main_images_album

        largest_photo = message.photo[-1]
        photo_file_id = largest_photo.file_id

        data = await StateManager.get_data_safe(state)
        main_images = data.get('main_images', [])
        main_images.append(photo_file_id)

        await StateManager.safe_update(state, main_images=main_images)

        await message.answer(
            f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ 1 –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –í—Å–µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(main_images)}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_main_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
        )

    async def handle_additional_images_album(self, message: Message, album: List[Message], state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if not album:
            return

        photo_files = []
        for msg in album:
            if msg.photo:
                largest_photo = msg.photo[-1]
                photo_files.append(largest_photo.file_id)

        if photo_files:
            data = await StateManager.get_data_safe(state)
            additional_images = data.get('additional_images', [])
            additional_images.extend(photo_files)

            await StateManager.safe_update(state, additional_images=additional_images)

            total_count = len(additional_images)
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º —Å {len(photo_files)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ! "
                f"–í—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {total_count}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
            )

    async def process_additional_single_image(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if message.media_group_id:
            return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handle_additional_images_album

        data = await StateManager.get_data_safe(state)
        additional_images = data.get('additional_images', [])

        largest_photo = message.photo[-1]
        additional_images.append(largest_photo.file_id)

        await StateManager.safe_update(state, additional_images=additional_images)

        await message.answer(
            f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! "
            f"–í—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(additional_images)}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
        )

    async def finish_main_images_command(self, message: Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        data = await StateManager.get_data_safe(state)
        main_images = data.get('main_images', [])

        await state.set_state(ProductStates.waiting_for_additional_images)

        user_name = message.from_user.first_name
        if main_images:
            await message.answer(
                f"{user_name}, ‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! "
                f"–í—Å–µ–≥–æ: {len(main_images)}\n\n"
                "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º."
            )
        else:
            await message.answer(
                f"{user_name}, –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç. "
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º."
            )

        await self._ask_additional_images(message, state, user_name)

    async def finish_additional_images_command(self, message: Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        data = await StateManager.get_data_safe(state)
        additional_images = data.get('additional_images', [])

        await state.set_state(ProductStates.waiting_for_shuffle_images)

        user_name = message.from_user.first_name

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        main_images = data.get('main_images', [])
        total_main = len(main_images)
        total_additional = len(additional_images)
        total_all = total_main + total_additional

        await message.answer(
            f"{user_name}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ:\n"
            f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ: {total_main}\n"
            f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {total_additional}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_all}\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –ª–∏ —Ñ–æ—Ç–æ."
        )

        await _ask_shuffle_images(message, state, user_name)

    async def process_shuffle_choice(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
        shuffle_choice = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "shuffle_"

        shuffle_images = (shuffle_choice == "yes")
        await StateManager.safe_update(state, shuffle_images=shuffle_images)
        await state.set_state(ProductStates.waiting_for_avito_delivery)

        user_name = callback.from_user.first_name
        choice_text = "–ø–µ—Ä–µ–º–µ—à–∞–Ω—ã" if shuffle_images else "–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"

        await callback.message.edit_text(
            f"{user_name}, —Ñ–æ—Ç–æ –±—É–¥—É—Ç {choice_text}.\n\n"
            "–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
        )

        from bot.services.delivery_service import DeliveryService
        await DeliveryService.ask_avito_delivery(callback.message, user_name)

    async def _ask_additional_images(self, message: Message, state: FSMContext, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        greeting = f"{user_name}, " if user_name else ""

        data = await StateManager.get_data_safe(state)
        main_count = len(data.get('main_images', []))

        await message.answer(
            f"{greeting}—Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
            f"üì∏ –£ –≤–∞—Å —É–∂–µ {main_count} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n"
            "‚Ä¢ üì∑ –ü–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ\n"
            "‚Ä¢ üñºÔ∏è –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∞–ª—å–±–æ–º)\n"
            "‚Ä¢ üì§ –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images\n\n"
            "üí° –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images"
        )

