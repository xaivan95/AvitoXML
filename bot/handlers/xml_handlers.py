import xml.etree.ElementTree as ET
from xml.dom import minidom
from datetime import datetime
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import tempfile
import os
from bot.database import db

router = Router()


@router.message(Command("my_products"))
async def my_products_command(message: Message):
    user_id = message.from_user.id
    products = await db.get_user_products(user_id)

    if not products:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
        return

    text = f"üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã ({len(products)}):\n\n"

    for i, product in enumerate(products, 1):
        text += f"{i}. {product.title}\n"
        text += f"   ID: {product.product_id}\n"
        text += f"   –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
        text += f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(product.images)}\n"
        text += "   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_product [–Ω–æ–º–µ—Ä] —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate_xml —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å XML —Ñ–∞–π–ª"

    await message.answer(text)


@router.message(Command("delete_product"))
async def delete_product_command(message: Message):
    user_id = message.from_user.id
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete_product [–Ω–æ–º–µ—Ä]")
        return

    try:
        index = int(args[0]) - 1
        success = await db.delete_product(user_id, index)
        if success:
            await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")


@router.message(Command("generate_xml"))
async def generate_xml_command(message: Message):
    user_id = message.from_user.id
    products = await db.get_user_products(user_id)

    if not products:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        root = ET.Element("Ads", formatVersion="3", target="Avito.ru")

        for product in products:
            ad = ET.SubElement(root, "Ad")

            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            ET.SubElement(ad, "Id").text = product.product_id
            ET.SubElement(ad, "Title").text = product.title
            ET.SubElement(ad, "Description").text = product.description
            ET.SubElement(ad, "Price").text = str(product.price)
            ET.SubElement(ad, "Category").text = product.category
            ET.SubElement(ad, "Address").text = product.address
            ET.SubElement(ad, "ContactPhone").text = product.contact_phone

            # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if product.condition:
                ET.SubElement(ad, "Condition").text = product.condition
            if product.ad_type:
                ET.SubElement(ad, "AdType").text = product.ad_type

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if product.images:
                images_element = ET.SubElement(ad, "Images")
                for image_url in product.images[:10]:  # –ê–≤–∏—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    image_elem = ET.SubElement(images_element, "Image")
                    image_elem.set("url", image_url)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML
        rough_string = ET.tostring(root, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        pretty_xml = reparsed.toprettyxml(indent="  ")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.xml', delete=False, encoding='utf-8') as f:
            f.write(pretty_xml)
            temp_filename = f.name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(temp_filename, 'rb') as f:
            await message.answer_document(
                document=f,
                caption="‚úÖ –í–∞—à XML —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ê–≤–∏—Ç–æ –≥–æ—Ç–æ–≤!\n\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ê–≤–∏—Ç–æ "
                        "–≤ —Ä–∞–∑–¥–µ–ª–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_filename)

    except Exception as e:
        print(f"Error generating XML: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")