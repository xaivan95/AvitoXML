from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re
import random
import uuid
from datetime import datetime

from bot.database import db
from bot.states import ProductStates
import config
import xml.etree.ElementTree as ET
from typing import List

def load_brands() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ XML —Ñ–∞–π–ª–∞"""
    try:
        tree = ET.parse('brands.xml')
        root = tree.getroot()
        brands = [brand.text for brand in root.findall('brand') if brand.text]
        return brands
    except Exception as e:
        print(f"Error loading brands: {e}")
        return ["Nike", "Adidas", "Reebok", "Puma", "No name", "–î—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥"]


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä
SIZE_CATEGORIES = [
    "–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å", "–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å", "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
    "–ë—Ä—é–∫–∏", "–î–∂–∏–Ω—Å—ã", "–®–æ—Ä—Ç—ã", "–ü–∏–¥–∂–∞–∫–∏ –∏ –∫–æ—Å—Ç—é–º—ã", "–†—É–±–∞—à–∫–∏", "–ü–ª–∞—Ç—å—è", "–Æ–±–∫–∏"
]


# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def ask_brand(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –±—Ä–µ–Ω–¥–∞ —Ç–æ–≤–∞—Ä–∞"""
    brands = load_brands()

    builder = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –±—Ä–µ–Ω–¥–æ–≤ + –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    for brand in brands[:10]:
        builder.button(text=brand, callback_data=f"brand_{brand}")

    builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–µ–Ω–¥—ã", callback_data="brand_show_all")
    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="brand_custom")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )


async def ask_size(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    # –†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã
    clothing_sizes = ["XS", "S", "M", "L", "XL", "XXL", "XXXL", "46", "48", "50", "52", "54", "56", "58"]
    # –†–∞–∑–º–µ—Ä—ã –æ–±—É–≤–∏
    shoe_sizes = ["35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46"]

    for size in clothing_sizes + shoe_sizes:
        builder.button(text=size, callback_data=f"size_{size}")

    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä", callback_data="size_custom")
    builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="size_skip")

    builder.adjust(4)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )


async def ask_condition(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    conditions = [
        ("üÜï –ù–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π", "new_with_tag"),
        ("‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ", "excellent"),
        ("üëç –•–æ—Ä–æ—à–µ–µ", "good"),
        ("‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "satisfactory")
    ]

    for condition_name, condition_code in conditions:
        builder.button(text=condition_name, callback_data=f"condition_{condition_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )


async def ask_sale_type(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    builder = InlineKeyboardBuilder()

    sale_types = [
        ("üõí –¢–æ–≤–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", "resale"),
        ("üè≠ –¢–æ–≤–∞—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è", "manufacturer")
    ]

    for sale_name, sale_code in sale_types:
        builder.button(text=sale_name, callback_data=f"saletype_{sale_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=builder.as_markup()
    )


async def ask_placement_type(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    placement_types = [
        ("üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥–∞–º", "cities"),
        ("üöá –ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ", "metro")
    ]

    for placement_name, placement_code in placement_types:
        builder.button(text=placement_name, callback_data=f"placement_{placement_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup()
    )


async def ask_placement_method(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    placement_methods = [
        ("üìç –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", "exact_cities"),
        ("üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "by_quantity"),
        ("üè¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ", "multiple_in_city")
    ]

    for method_name, method_code in placement_methods:
        builder.button(text=method_name, callback_data=f"method_{method_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


async def ask_cities(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–æ–≤"""
    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    )


async def ask_quantity(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:"
    )
router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤
temp_main_albums = {}
temp_additional_albums = {}


def generate_guid() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ GUID –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    return str(uuid.uuid4())


async def show_main_categories(message: Message, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()

    for cat_id, cat_data in config.AVITO_CATEGORIES.items():
        builder.button(text=cat_data["name"], callback_data=f"cat_{cat_id}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}üéØ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )


async def show_subcategories(message: Message, category_id: str, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_data = config.AVITO_CATEGORIES.get(category_id)
    if not category_data:
        await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    subcategories = category_data.get("subcategories", {})
    if not subcategories:
        await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return

    builder = InlineKeyboardBuilder()

    for subcat_id, subcat_name in subcategories.items():
        builder.button(text=subcat_name, callback_data=f"sub_{subcat_id}")

    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")
    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {category_data['name']}:",
        reply_markup=builder.as_markup()
    )


async def show_price_type_options(message: Message, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", callback_data="price_fixed")
    builder.button(text="üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", callback_data="price_range")
    builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="price_skip")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}—É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n\n"
        "1) üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1234) - –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –≤ —Ñ–∞–π–ª–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –æ–¥–Ω–∞ —Ü–µ–Ω–∞\n"
        "2) üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä 1200-1500) - –∫–∞–∂–¥–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n"
        "3) ‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å - —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –±—É–¥–µ—Ç",
        reply_markup=builder.as_markup()
    )


async def show_contact_methods(message: Message, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="contact_both")
    builder.button(text="üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="contact_phone")
    builder.button(text="üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="contact_message")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
        reply_markup=builder.as_markup()
    )


async def ask_additional_images(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}—Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "üì∏ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images\n\n"
        "–ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images"
    )


async def ask_shuffle_images(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞, –ø–µ—Ä–µ–º–µ—à–∞—Ç—å", callback_data="shuffle_yes")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="shuffle_no")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    main_count = len(data.get('main_images', []))
    additional_count = len(data.get('additional_images', []))
    total_count = main_count + additional_count

    await message.answer(
        f"{greeting}–Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å —Ñ–æ—Ç–æ?\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ:\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ: {main_count}\n"
        f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {additional_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_count}\n\n"
        "–ü—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –≤—Å–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.",
        reply_markup=builder.as_markup()
    )


async def ask_avito_delivery(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="delivery_yes")
    builder.button(text="‚ùå –ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ", callback_data="delivery_no")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫—É?",
        reply_markup=builder.as_markup()
    )


async def ask_delivery_services(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
    builder = InlineKeyboardBuilder()

    delivery_services = [
        ("–í—ã–∫–ª—é—á–µ–Ω–∞", "disabled"),
        ("–ü–í–ó", "pickup"),
        ("–ö—É—Ä—å–µ—Ä", "courier"),
        ("–ü–æ—Å—Ç–∞–º–∞—Ç", "postamat"),
        ("–°–≤–æ–π –∫—É—Ä—å–µ—Ä", "own_courier"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö", "sdek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏", "business_lines"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä DPD", "dpd"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–≠–ö", "pek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", "russian_post"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö –∫—É—Ä—å–µ—Ä", "sdek_courier"),
        ("–°–∞–º–æ–≤—ã–≤–æ–∑ —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π", "self_pickup_online")
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã
    data = await state.get_data()
    selected_services = data.get('delivery_services', [])

    for service_name, service_code in delivery_services:
        if service_code in selected_services:
            builder.button(text=f"‚úÖ {service_name}", callback_data=f"service_{service_code}")
        else:
            builder.button(text=service_name, callback_data=f"service_{service_code}")

    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"service_done")
    builder.adjust(1)

    selected_text = ", ".join([name for name, code in delivery_services if code in selected_services])

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
        f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {selected_text or '–Ω–∏—á–µ–≥–æ'}\n\n"
        "üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞. –†—è–¥–æ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ—è–≤–∏—Ç—Å—è –≥–∞–ª–æ—á–∫–∞.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
        reply_markup=builder.as_markup()
    )


async def update_delivery_services_keyboard(message: Message, state: FSMContext, user_name: str = ""):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
    data = await state.get_data()
    selected_services = data.get('delivery_services', [])

    builder = InlineKeyboardBuilder()

    delivery_services = [
        ("–í—ã–∫–ª—é—á–µ–Ω–∞", "disabled"),
        ("–ü–í–ó", "pickup"),
        ("–ö—É—Ä—å–µ—Ä", "courier"),
        ("–ü–æ—Å—Ç–∞–º–∞—Ç", "postamat"),
        ("–°–≤–æ–π –∫—É—Ä—å–µ—Ä", "own_courier"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö", "sdek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏", "business_lines"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä DPD", "dpd"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–≠–ö", "pek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", "russian_post"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö –∫—É—Ä—å–µ—Ä", "sdek_courier"),
        ("–°–∞–º–æ–≤—ã–≤–æ–∑ —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π", "self_pickup_online")
    ]

    for service_name, service_code in delivery_services:
        if service_code in selected_services:
            builder.button(text=f"‚úÖ {service_name}", callback_data=f"service_{service_code}")
        else:
            builder.button(text=service_name, callback_data=f"service_{service_code}")

    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"service_done")
    builder.adjust(1)

    selected_text = ", ".join([name for name, code in delivery_services if code in selected_services])

    greeting = f"{user_name}, " if user_name else ""
    await message.edit_text(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
        f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {selected_text or '–Ω–∏—á–µ–≥–æ'}\n\n"
        "üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞. –†—è–¥–æ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ—è–≤–∏—Ç—Å—è –≥–∞–ª–æ—á–∫–∞.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
        reply_markup=builder.as_markup()
    )


async def complete_product_creation(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
    try:
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['title', 'description', 'category', 'contact_phone']
        missing_fields = [field for field in required_fields if not data.get(field)]

        if missing_fields:
            await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
            return

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω—ã–µ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
        main_images = data.get('main_images', [])
        additional_images = data.get('additional_images', [])
        all_images = main_images + additional_images

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if data.get('shuffle_images', False) and all_images:
            random.shuffle(all_images)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
        product_data = {
            'product_id': data.get('product_id'),
            'title': data.get('title'),
            'description': data.get('description'),
            'price': data.get('price'),
            'price_type': data.get('price_type', 'none'),
            'price_min': data.get('price_min'),
            'price_max': data.get('price_max'),
            'category': data.get('category'),
            'category_name': data.get('category_name', ''),
            'contact_phone': data.get('contact_phone'),
            'display_phone': data.get('display_phone', ''),
            'contact_method': data.get('contact_method', 'both'),
            'main_images': main_images,
            'additional_images': additional_images,
            'all_images': all_images,
            'total_images': len(all_images),
            'shuffle_images': data.get('shuffle_images', False),
            'avito_delivery': data.get('avito_delivery', False),
            'delivery_services': data.get('delivery_services', []),
            'delivery_discount': data.get('delivery_discount', 'none'),
            'multioffer': data.get('multioffer', False),
            'brand': data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'size': data.get('size', ''),
            'condition': data.get('condition', ''),
            'sale_type': data.get('sale_type', ''),
            'placement_type': data.get('placement_type', ''),
            'placement_method': data.get('placement_method', ''),
            'cities': data.get('cities', []),
            'quantity': data.get('quantity', 1)
        }

        await db.add_product(message.from_user.id, product_data)

        await state.clear()
        await db.clear_user_state(message.from_user.id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        main_count = len(main_images)
        additional_count = len(additional_images)
        delivery_services = data.get('delivery_services', [])
        delivery_discount = data.get('delivery_discount', 'none')
        multioffer = data.get('multioffer', False)

        delivery_text = "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
        if data.get('avito_delivery', False) and delivery_services:
            delivery_names = {
                "disabled": "–í—ã–∫–ª—é—á–µ–Ω–∞",
                "pickup": "–ü–í–ó",
                "courier": "–ö—É—Ä—å–µ—Ä",
                "postamat": "–ü–æ—Å—Ç–∞–º–∞—Ç",
                "own_courier": "–°–≤–æ–π –∫—É—Ä—å–µ—Ä",
                "sdek": "–°–î–≠–ö",
                "business_lines": "–î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏",
                "dpd": "DPD",
                "pek": "–ü–≠–ö",
                "russian_post": "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
                "sdek_courier": "–°–î–≠–ö –∫—É—Ä—å–µ—Ä",
                "self_pickup_online": "–°–∞–º–æ–≤—ã–≤–æ–∑ —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π"
            }
            selected_names = [delivery_names.get(code, code) for code in delivery_services if code != "disabled"]
            delivery_text = ", ".join(selected_names) if selected_names else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

        discount_names = {
            "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
            "discount": "üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
            "none": "üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏"
        }

        condition_names = {
            "new_with_tag": "üÜï –ù–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π",
            "excellent": "‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ",
            "good": "üëç –•–æ—Ä–æ—à–µ–µ",
            "satisfactory": "‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
        }

        sale_type_names = {
            "resale": "üõí –¢–æ–≤–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
            "manufacturer": "üè≠ –¢–æ–≤–∞—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"
        }

        await message.answer(
            f"{user_name}, ‚úÖ —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title'][:50]}...\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚Ä¢ –ë—Ä–µ–Ω–¥: {data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition_names.get(data.get('condition', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_type_names.get(data.get('sale_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ç–æ: {main_count}\n"
            f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ: {additional_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(all_images)}\n"
            f"‚Ä¢ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ: {'–î–∞' if data.get('shuffle_images') else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}\n"
            f"‚Ä¢ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {discount_names.get(delivery_discount, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –ú—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {'–î–∞' if multioffer else '–ù–µ—Ç'}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/new_product - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n"
            f"/my_products - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n"
            f"/generate_xml - —Å–æ–∑–¥–∞—Ç—å XML —Ñ–∞–π–ª"
        )

    except Exception as e:
        print(f"Error in complete_product_creation: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@router.message(Command("new_product"))
async def new_product_command(message: Message, state: FSMContext):
    await state.clear()
    await db.clear_user_state(message.from_user.id)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º GUID –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    product_guid = generate_guid()
    await state.update_data(
        product_id=product_guid,
        main_images=[],
        additional_images=[],
        shuffle_images=False,
        avito_delivery=False,
        delivery_services=[]
    )

    await state.set_state(ProductStates.waiting_for_category)

    user_name = message.from_user.first_name
    await show_main_categories(message, user_name)


@router.callback_query(F.data == "back_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await state.set_state(ProductStates.waiting_for_category)
    user_name = callback.from_user.first_name
    await show_main_categories(callback.message, user_name)


@router.callback_query(F.data.startswith("cat_"))
async def process_main_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = callback.data[4:]  # –£–±–∏—Ä–∞–µ–º "cat_"
    category_data = config.AVITO_CATEGORIES.get(category_id)

    if not category_data:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.update_data(main_category_id=category_id, main_category_name=category_data["name"])
    await state.set_state(ProductStates.waiting_for_subcategory)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(f"{user_name}, –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data['name']}")
    await show_subcategories(callback.message, category_id, user_name)


@router.callback_query(F.data.startswith("sub_"))
async def process_subcategory(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcategory_id = callback.data[4:]  # –£–±–∏—Ä–∞–µ–º "sub_"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    main_category_id = data.get('main_category_id')
    main_category_name = data.get('main_category_name')

    if not main_category_id:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_data = config.AVITO_CATEGORIES.get(main_category_id)
    subcategories = category_data.get("subcategories", {})
    subcategory_name = subcategories.get(subcategory_id)

    if not subcategory_name:
        await callback.answer("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Avito
    avito_category_id = config.CATEGORY_IDS.get(subcategory_id, config.CATEGORY_IDS.get(main_category_id))

    await state.update_data(
        category=avito_category_id,
        category_name=f"{main_category_name} - {subcategory_name}",
        subcategory_name=subcategory_name
    )
    await state.set_state(ProductStates.waiting_for_title)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, ‚úÖ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {main_category_name} - {subcategory_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"
    )


@router.message(StateFilter(ProductStates.waiting_for_title))
async def process_product_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
    title = message.text.strip()
    if not title:
        await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        return

    if len(title) > 100:
        await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        return

    await state.update_data(title=title)
    await state.set_state(ProductStates.waiting_for_description)

    user_name = message.from_user.first_name
    await message.answer(
        f"{user_name}, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–µ –º–µ–Ω–µ–µ 100 –∏ –Ω–µ –±–æ–ª–µ–µ 3500 —Å–∏–º–≤–æ–ª–æ–≤:"
    )


@router.message(StateFilter(ProductStates.waiting_for_description))
async def process_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    description = message.text.strip()

    if len(description) < 100:
        await message.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return

    if len(description) > 3500:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 3500 —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(description=description)
    await state.set_state(ProductStates.waiting_for_price_type)

    user_name = message.from_user.first_name
    await show_price_type_options(message, user_name)


@router.callback_query(F.data == "price_fixed")
async def process_price_fixed(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
    await state.update_data(price_type="fixed")
    await state.set_state(ProductStates.waiting_for_price)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500):"
    )


@router.callback_query(F.data == "price_range")
async def process_price_range(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
    await state.update_data(price_type="range")
    await state.set_state(ProductStates.waiting_for_price_range)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ò–ù–ò–ú–£–ú-–ú–ê–ö–°–ò–ú–£–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200-1500):"
    )


@router.callback_query(F.data == "price_skip")
async def process_price_skip(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ü–µ–Ω—ã"""
    await state.update_data(price_type="none", price=None, price_min=None, price_max=None)
    await state.set_state(ProductStates.waiting_for_phone)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, —Ü–µ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.\n"
        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
        "‚Äî +7 (495) 777-10-66\n"
        "‚Äî (81374) 4-55-75\n"
        "‚Äî 8 905 207 04 90\n"
        "‚Äî +7 905 2070490\n"
        "‚Äî 88123855085"
    )


@router.message(StateFilter(ProductStates.waiting_for_price))
async def process_fixed_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(price=price, price_min=None, price_max=None)
        await state.set_state(ProductStates.waiting_for_phone)

        user_name = message.from_user.first_name
        await message.answer(
            f"{user_name}, —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.\n"
            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
            "‚Äî +7 (495) 777-10-66\n"
            "‚Äî (81374) 4-55-75\n"
            "‚Äî 8 905 207 04 90\n"
            "‚Äî +7 905 2070490\n"
            "‚Äî 88123855085"
        )
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")


@router.message(StateFilter(ProductStates.waiting_for_price_range))
async def process_price_range_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if '-' not in text:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ò–ù–ò–ú–£–ú-–ú–ê–ö–°–ò–ú–£–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200-1500):")
        return

    try:
        min_price, max_price = text.split('-')
        min_price = int(min_price.strip())
        max_price = int(max_price.strip())

        if min_price <= 0 or max_price <= 0:
            await message.answer("–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –µ—â–µ —Ä–∞–∑:")
            return

        if min_price >= max_price:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(price_min=min_price, price_max=max_price, price=None)
        await state.set_state(ProductStates.waiting_for_phone)

        user_name = message.from_user.first_name
        await message.answer(
            f"{user_name}, –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_price}-{max_price} —Ä—É–±.\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.\n"
            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
            "‚Äî +7 (495) 777-10-66\n"
            "‚Äî (81374) 4-55-75\n"
            "‚Äî 8 905 207 04 90\n"
            "‚Äî +7 905 2070490\n"
            "‚Äî 88123855085"
        )
    except ValueError:
        await message.answer(
            "–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ò–ù–ò–ú–£–ú-–ú–ê–ö–°–ò–ú–£–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200-1500):")


def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ +
    cleaned = re.sub(r'[^\d+]', '', phone)

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if cleaned.startswith('8'):
        cleaned = '+7' + cleaned[1:]
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
    elif cleaned.startswith('7'):
        cleaned = '+' + cleaned
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º +7
    elif len(cleaned) == 10:
        cleaned = '+7' + cleaned

    return cleaned


def is_valid_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    normalized = normalize_phone(phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX (11 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +7)
    if re.match(r'^\+7\d{10}$', normalized):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –±–µ–∑ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    if re.match(r'^8\d{10}$', phone.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    patterns = [
        r'^\+7\s?\(\d{3}\)\s?\d{3}-\d{2}-\d{2}$',
        r'^\(\d{5}\)\s?\d-\d{2}-\d{2}$',
        r'^8\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$',
        r'^\+7\s?\d{3}\s?\d{7}$',
        r'^\d{11}$'
    ]

    for pattern in patterns:
        if re.match(pattern, phone.strip()):
            return True

    return False


@router.message(StateFilter(ProductStates.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    phone = message.text.strip()

    if not is_valid_phone(phone):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
            "‚Äî +7 (495) 777-10-66\n"
            "‚Äî (81374) 4-55-75\n"
            "‚Äî 8 905 207 04 90\n"
            "‚Äî +7 905 2070490\n"
            "‚Äî 88123855085"
        )
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    normalized_phone = normalize_phone(phone)
    await state.update_data(contact_phone=normalized_phone, display_phone=phone)
    await state.set_state(ProductStates.waiting_for_contact_method)

    user_name = message.from_user.first_name
    await show_contact_methods(message, user_name)


@router.callback_query(F.data.startswith("contact_"))
async def process_contact_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
    contact_method = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "contact_"

    contact_methods = {
        "both": "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
        "phone": "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        "message": "–í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
    }

    method_name = contact_methods.get(contact_method, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(contact_method=contact_method)
    await state.set_state(ProductStates.waiting_for_main_images)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {method_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç –û–°–ù–û–í–ù–´–ï —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).\n\n"
        "üì∏ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_main_images"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.message(StateFilter(ProductStates.waiting_for_main_images), F.media_group_id)
async def process_main_album_images(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    media_group_id = message.media_group_id

    if media_group_id not in temp_main_albums:
        temp_main_albums[media_group_id] = {
            'user_id': message.from_user.id,
            'photos': [],
            'created_at': datetime.now()
        }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º
    if message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        largest_photo = message.photo[-1]
        temp_main_albums[media_group_id]['photos'].append(largest_photo.file_id)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ 10
    if len(temp_main_albums[media_group_id]['photos']) > 10:
        temp_main_albums[media_group_id]['photos'] = temp_main_albums[media_group_id]['photos'][:10]


@router.message(StateFilter(ProductStates.waiting_for_main_images), F.photo)
async def process_main_single_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.media_group_id:
        # –≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ process_main_album_images
        return

    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
    largest_photo = message.photo[-1]
    photo_file_id = largest_photo.file_id

    await state.update_data(main_images=[photo_file_id])

    user_name = message.from_user.first_name
    await message.answer(
        f"{user_name}, ‚úÖ –ø–æ–ª—É—á–µ–Ω–æ 1 –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
        "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º."
    )

    await state.set_state(ProductStates.waiting_for_additional_images)
    await ask_additional_images(message, user_name)


@router.message(Command("finish_main_images"))
async def finish_main_images_command(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_albums = [album for album in temp_main_albums.values() if album['user_id'] == message.from_user.id]

    main_images = data.get('main_images', [])

    if user_albums:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤—Å–µ—Ö –∞–ª—å–±–æ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for album in user_albums:
            main_images.extend(album['photos'])

        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã
        for media_group_id, album in list(temp_main_albums.items()):
            if album['user_id'] == message.from_user.id:
                del temp_main_albums[media_group_id]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await state.update_data(main_images=main_images)
    await state.set_state(ProductStates.waiting_for_additional_images)

    user_name = message.from_user.first_name
    if main_images:
        await message.answer(
            f"{user_name}, ‚úÖ –ø–æ–ª—É—á–µ–Ω–æ {len(main_images)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º."
        )
    else:
        await message.answer(
            f"{user_name}, –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º."
        )

    await ask_additional_images(message, user_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.message(StateFilter(ProductStates.waiting_for_additional_images), F.media_group_id)
async def process_additional_album_images(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    media_group_id = message.media_group_id

    if media_group_id not in temp_additional_albums:
        temp_additional_albums[media_group_id] = {
            'user_id': message.from_user.id,
            'photos': [],
            'created_at': datetime.now()
        }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º
    if message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        largest_photo = message.photo[-1]
        temp_additional_albums[media_group_id]['photos'].append(largest_photo.file_id)


@router.message(StateFilter(ProductStates.waiting_for_additional_images), F.photo)
async def process_additional_single_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.media_group_id:
        # –≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ process_additional_album_images
        return

    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    data = await state.get_data()
    additional_images = data.get('additional_images', [])

    largest_photo = message.photo[-1]
    additional_images.append(largest_photo.file_id)

    await state.update_data(additional_images=additional_images)

    user_name = message.from_user.first_name
    await message.answer(
        f"{user_name}, ‚úÖ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(additional_images)}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
    )


@router.message(Command("finish_additional_images"))
async def finish_additional_images_command(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_albums = [album for album in temp_additional_albums.values() if album['user_id'] == message.from_user.id]

    additional_images = data.get('additional_images', [])

    if user_albums:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤—Å–µ—Ö –∞–ª—å–±–æ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for album in user_albums:
            additional_images.extend(album['photos'])

        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã
        for media_group_id, album in list(temp_additional_albums.items()):
            if album['user_id'] == message.from_user.id:
                del temp_additional_albums[media_group_id]

    await state.update_data(additional_images=additional_images)
    await state.set_state(ProductStates.waiting_for_shuffle_images)

    user_name = message.from_user.first_name
    await ask_shuffle_images(message, state, user_name)


@router.callback_query(F.data.startswith("shuffle_"))
async def process_shuffle_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    shuffle_choice = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "shuffle_"

    shuffle_images = (shuffle_choice == "yes")
    await state.update_data(shuffle_images=shuffle_images)
    await state.set_state(ProductStates.waiting_for_avito_delivery)

    user_name = callback.from_user.first_name
    choice_text = "–ø–µ—Ä–µ–º–µ—à–∞–Ω—ã" if shuffle_images else "–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"

    await callback.message.edit_text(
        f"{user_name}, —Ñ–æ—Ç–æ –±—É–¥—É—Ç {choice_text}.\n\n"
        "–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
    )

    await ask_avito_delivery(callback.message, user_name)

@router.callback_query(F.data.startswith("delivery_"))
async def process_delivery_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_choice = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "delivery_"

    avito_delivery = (delivery_choice == "yes")
    await state.update_data(avito_delivery=avito_delivery)

    user_name = callback.from_user.first_name

    if avito_delivery:
        await state.set_state(ProductStates.waiting_for_delivery_services)
        await ask_delivery_services(callback.message, state, user_name)
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        await state.set_state(ProductStates.waiting_for_multioffer)
        await ask_multioffer(callback.message, user_name)


@router.callback_query(F.data.startswith("service_"))
async def process_delivery_service(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    service_code = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "service_"

    if service_code == "done":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
        await state.set_state(ProductStates.waiting_for_delivery_discount)
        user_name = callback.from_user.first_name
        await ask_delivery_discount(callback.message, user_name)
        return

    data = await state.get_data()
    selected_services = data.get('delivery_services', [])

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–í—ã–∫–ª—é—á–µ–Ω–∞", –æ—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ –≤—ã–±–æ—Ä—ã
    if service_code == "disabled":
        selected_services = ["disabled"]
    elif "disabled" in selected_services:
        selected_services.remove("disabled")

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Å–ª—É–∂–±—ã
    if service_code in selected_services:
        selected_services.remove(service_code)
    else:
        selected_services.append(service_code)

    await state.update_data(delivery_services=selected_services)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—ã–±–æ—Ä–æ–≤
    await update_delivery_services_keyboard(callback.message, state, callback.from_user.first_name)


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

async def ask_delivery_discount(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="discount_free")
    builder.button(text="üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="discount_discount")
    builder.button(text="üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏", callback_data="discount_none")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É?\n\n"
        "–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ 500 —Ä—É–±–ª–µ–π –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
        "‚Ä¢ üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É - —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ—è–≤—è—Ç—Å—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        "‚Ä¢ üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏ - —Å–∫–∏–¥–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–µ—Ç",
        reply_markup=builder.as_markup()
    )


async def ask_multioffer(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞", callback_data="multioffer_yes")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data="multioffer_no")

    builder.adjust(2)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("discount_"))
async def process_delivery_discount(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    discount_type = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "discount_"

    discount_names = {
        "free": "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        "discount": "—Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
        "none": "–Ω–µ—Ç —Å–∫–∏–¥–∫–∏"
    }

    await state.update_data(delivery_discount=discount_type)
    await state.set_state(ProductStates.waiting_for_multioffer)

    user_name = callback.from_user.first_name
    discount_text = discount_names.get(discount_type, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    await callback.message.edit_text(
        f"{user_name}, —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {discount_text}\n\n"
        "–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
    )

    await ask_multioffer(callback.message, user_name)

@router.callback_query(F.data.startswith("multioffer_"))
async def process_multioffer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    multioffer_choice = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º "multioffer_"

    multioffer = (multioffer_choice == "yes")
    await state.update_data(multioffer=multioffer)

    user_name = callback.from_user.first_name
    multioffer_text = "–º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º" if multioffer else "–æ–±—ã—á–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"

    await callback.message.edit_text(
        f"{user_name}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {multioffer_text}.\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –±—Ä–µ–Ω–¥–∞
    await state.set_state(ProductStates.waiting_for_brand)
    await ask_brand(callback.message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
@router.callback_query(F.data.startswith("brand_"))
async def process_brand(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞"""
    brand_data = callback.data[6:]  # –£–±–∏—Ä–∞–µ–º "brand_"

    if brand_data == "show_all":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–µ–Ω–¥—ã
        brands = load_brands()
        builder = InlineKeyboardBuilder()

        for brand in brands:
            builder.button(text=brand, callback_data=f"brand_{brand}")

        builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="brand_custom")
        builder.adjust(1)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=builder.as_markup()
        )
        return

    if brand_data == "custom":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        await state.set_state(ProductStates.waiting_for_brand)
        return

    await state.update_data(brand=brand_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    category_name = data.get('category_name', '')

    needs_size = any(size_cat in category_name for size_cat in SIZE_CATEGORIES)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(f"{user_name}, –±—Ä–µ–Ω–¥: {brand_data}")

    if needs_size:
        await state.set_state(ProductStates.waiting_for_size)
        await ask_size(callback.message, user_name)
    else:
        await state.set_state(ProductStates.waiting_for_condition)
        await ask_condition(callback.message, user_name)


@router.message(StateFilter(ProductStates.waiting_for_brand))
async def process_custom_brand(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±—Ä–µ–Ω–¥–∞"""
    brand = message.text.strip()
    if not brand:
        await message.answer("–ë—Ä–µ–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        return

    await state.update_data(brand=brand)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    category_name = data.get('category_name', '')

    needs_size = any(size_cat in category_name for size_cat in SIZE_CATEGORIES)

    user_name = message.from_user.first_name
    if needs_size:
        await state.set_state(ProductStates.waiting_for_size)
        await ask_size(message, user_name)
    else:
        await state.set_state(ProductStates.waiting_for_condition)
        await ask_condition(message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
@router.callback_query(F.data.startswith("size_"))
async def process_size(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    size_data = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º "size_"

    if size_data == "custom":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(ProductStates.waiting_for_size)
        return

    if size_data == "skip":
        await state.update_data(size="")
    else:
        await state.update_data(size=size_data)

    user_name = callback.from_user.first_name
    size_text = size_data if size_data != "skip" else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    await callback.message.edit_text(f"{user_name}, —Ä–∞–∑–º–µ—Ä: {size_text}")
    await state.set_state(ProductStates.waiting_for_condition)
    await ask_condition(callback.message, user_name)


@router.message(StateFilter(ProductStates.waiting_for_size))
async def process_custom_size(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    size = message.text.strip()
    await state.update_data(size=size)

    user_name = message.from_user.first_name
    await message.answer(f"{user_name}, —Ä–∞–∑–º–µ—Ä: {size}")
    await state.set_state(ProductStates.waiting_for_condition)
    await ask_condition(message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("condition_"))
async def process_condition(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    condition = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "condition_"

    condition_names = {
        "new_with_tag": "–Ω–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π",
        "excellent": "–æ—Ç–ª–∏—á–Ω–æ–µ",
        "good": "—Ö–æ—Ä–æ—à–µ–µ",
        "satisfactory": "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
    }

    await state.update_data(condition=condition)
    await state.set_state(ProductStates.waiting_for_sale_type)

    user_name = callback.from_user.first_name
    condition_text = condition_names.get(condition, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    await callback.message.edit_text(f"{user_name}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {condition_text}")
    await ask_sale_type(callback.message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏
@router.callback_query(F.data.startswith("saletype_"))
async def process_sale_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    sale_type = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "saletype_"

    sale_type_names = {
        "resale": "—Ç–æ–≤–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
        "manufacturer": "—Ç–æ–≤–∞—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"
    }

    await state.update_data(sale_type=sale_type)
    await state.set_state(ProductStates.waiting_for_placement_type)

    user_name = callback.from_user.first_name
    sale_text = sale_type_names.get(sale_type, "–Ω–µ —É–∫–∞–∑–∞–Ω")

    await callback.message.edit_text(f"{user_name}, —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_text}")
    await ask_placement_type(callback.message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
@router.callback_query(F.data.startswith("placement_"))
async def process_placement_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    placement_type = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "placement_"

    await state.update_data(placement_type=placement_type)
    await state.set_state(ProductStates.waiting_for_placement_method)

    user_name = callback.from_user.first_name
    placement_text = "–ø–æ –≥–æ—Ä–æ–¥–∞–º" if placement_type == "cities" else "–ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ"

    await callback.message.edit_text(f"{user_name}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_text}")
    await ask_placement_method(callback.message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
@router.callback_query(F.data.startswith("method_"))
async def process_placement_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    method = callback.data[7:]  # –£–±–∏—Ä–∞–µ–º "method_"

    await state.update_data(placement_method=method)

    user_name = callback.from_user.first_name

    if method == "exact_cities":
        await state.set_state(ProductStates.waiting_for_cities)
        await ask_cities(callback.message, user_name)
    elif method in ["by_quantity", "multiple_in_city"]:
        await state.set_state(ProductStates.waiting_for_quantity)
        await ask_quantity(callback.message, user_name)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        await complete_product_creation(callback.message, state, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
@router.message(StateFilter(ProductStates.waiting_for_cities))
async def process_cities(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    cities_text = message.text.strip()
    if not cities_text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤:")
        return

    cities = [city.strip() for city in cities_text.split(',')]
    await state.update_data(cities=cities)

    user_name = message.from_user.first_name
    await message.answer(f"{user_name}, –≥–æ—Ä–æ–¥–∞: {', '.join(cities)}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await complete_product_creation(message, state, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(StateFilter(ProductStates.waiting_for_quantity))
async def process_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            return

        await state.update_data(quantity=quantity)

        user_name = message.from_user.first_name
        await message.answer(f"{user_name}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {quantity}")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        await complete_product_creation(message, state, user_name)

    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")


