from pydoc import html

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re
import random
import uuid
from datetime import datetime
from bot.calendar import ProductCalendar, CalendarCallback
from bot.database import db
from bot.handlers.metro_data import get_metro_stations, get_metro_cities
from bot.handlers.product_parameters import is_bag_category, get_bag_parameters
from bot.states import ProductStates
import config
import xml.etree.ElementTree as ET
from typing import List, Dict

from –Ω—Ñ import validate_city_nominatim

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä
SIZE_CATEGORIES = [
    "–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å", "–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å", "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
    "–ë—Ä—é–∫–∏", "–î–∂–∏–Ω—Å—ã", "–®–æ—Ä—Ç—ã", "–ü–∏–¥–∂–∞–∫–∏ –∏ –∫–æ—Å—Ç—é–º—ã", "–†—É–±–∞—à–∫–∏", "–ü–ª–∞—Ç—å—è", "–Æ–±–∫–∏"
]


async def ask_quantity_from_xml(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–µ—Ç–æ–¥–∞ –∏–∑ XML"""
    cities = load_cities_from_xml()
    total_cities = len(cities)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≥–æ—Ä–æ–¥–æ–≤
    sample_cities = ", ".join([city['name'] for city in cities[:5]])

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º {total_cities}):\n\n"
        f"üèôÔ∏è –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {total_cities}\n"
        f"üìç –ü—Ä–∏–º–µ—Ä: {sample_cities}...\n"
        f"üéØ –ë—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º"
    )


def load_cities_from_xml() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ XML —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        tree = ET.parse('cities.xml')
        root = tree.getroot()

        cities = []
        for city_elem in root.findall('city'):
            try:
                name_elem = city_elem.find('name')
                population_elem = city_elem.find('population')
                region_elem = city_elem.find('region')

                if name_elem is not None and name_elem.text:
                    city_data = {
                        'name': name_elem.text.strip(),
                        'population': int(
                            population_elem.text) if population_elem is not None and population_elem.text else 0,
                        'region': region_elem.text if region_elem is not None else ''
                    }
                    cities.append(city_data)

            except (ValueError, AttributeError) as e:
                print(f"Error parsing city element: {e}")
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        cities.sort(key=lambda x: x['population'], reverse=True)
        return cities

    except Exception as e:
        print(f"Error loading cities XML: {e}")
        return get_default_cities()


def get_default_cities() -> List[Dict]:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
    return [
        {'name': '–ú–æ—Å–∫–≤–∞', 'population': 12678079, 'region': '–ú–æ—Å–∫–≤–∞'},
        {'name': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'population': 5398064, 'region': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'},
        {'name': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 'population': 1625631, 'region': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        {'name': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 'population': 1493749, 'region': '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        {'name': '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', 'population': 1244254, 'region': '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        {'name': '–ö–∞–∑–∞–Ω—å', 'population': 1257391, 'region': '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω'},
        {'name': '–ß–µ–ª—è–±–∏–Ω—Å–∫', 'population': 1187965, 'region': '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        {'name': '–û–º—Å–∫', 'population': 1125695, 'region': '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        {'name': '–°–∞–º–∞—Ä–∞', 'population': 1144759, 'region': '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        {'name': '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 'population': 1137704, 'region': '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'}
    ]


def get_default_cities() -> List[Dict]:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
    return [
        {'name': '–ú–æ—Å–∫–≤–∞', 'population': 12678079, 'region': '–ú–æ—Å–∫–≤–∞'},
        {'name': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'population': 5398064, 'region': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'},
        {'name': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 'population': 1625631, 'region': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        # ... –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ]


def get_cities_with_metro() -> List[Dict]:
    """–ì–æ—Ä–æ–¥–∞ —Å –º–µ—Ç—Ä–æ"""
    metro_cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
                    '–°–∞–º–∞—Ä–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥']

    all_cities = load_cities_from_xml()
    return [city for city in all_cities if city['name'] in metro_cities]
# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def ask_brand(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –±—Ä–µ–Ω–¥–∞ —Ç–æ–≤–∞—Ä–∞"""
    brands = load_brands()

    builder = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –±—Ä–µ–Ω–¥–æ–≤ + –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    for brand in brands[:10]:
        builder.button(text=brand, callback_data=f"brand_{brand}")

    builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–µ–Ω–¥—ã", callback_data="brand_show_all")
    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="brand_custom")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )


async def ask_city_input(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É"""
    greeting = f"{user_name}, " if user_name else ""

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:\n\n"
        "üèôÔ∏è –ì–æ—Ä–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        "üìù –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å",
        reply_markup=keyboard
    )

async def ask_size(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    # –†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã
    clothing_sizes = ["XS", "S", "M", "L", "XL", "XXL", "XXXL", "46", "48", "50", "52", "54", "56", "58"]
    # –†–∞–∑–º–µ—Ä—ã –æ–±—É–≤–∏
    shoe_sizes = ["35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46"]

    for size in clothing_sizes + shoe_sizes:
        builder.button(text=size, callback_data=f"size_{size}")

    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä", callback_data="size_custom")
    builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="size_skip")

    builder.adjust(4)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )


async def ask_condition(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    builder = InlineKeyboardBuilder()

    conditions = [
        ("üÜï –ù–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π", "new_with_tag"),
        ("‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ", "excellent"),
        ("üëç –•–æ—Ä–æ—à–µ–µ", "good"),
        ("‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "satisfactory")
    ]

    for condition_name, condition_code in conditions:
        builder.button(text=condition_name, callback_data=f"condition_{condition_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )


async def ask_sale_type(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    builder = InlineKeyboardBuilder()

    sale_types = [
        ("üõí –¢–æ–≤–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", "resale"),
        ("üè≠ –¢–æ–≤–∞—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è", "manufacturer"),
        ("üë§ –ü—Ä–æ–¥–∞—é —Å–≤–æ—ë", "personal")  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
    ]

    for sale_name, sale_code in sale_types:
        builder.button(text=sale_name, callback_data=f"saletype_{sale_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=builder.as_markup()
    )


async def ask_placement_type(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    placement_types = [
        ("üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥–∞–º", "cities"),
        ("üöá –ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ", "metro")
    ]

    for placement_name, placement_code in placement_types:
        builder.button(text=placement_name, callback_data=f"placement_{placement_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup()
    )


async def ask_placement_method(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    placement_methods = [
        ("üìç –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", "exact_cities"),
        ("üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "by_quantity"),
        ("üè¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ", "multiple_in_city")
    ]

    for method_name, method_code in placement_methods:
        builder.button(text=method_name, callback_data=f"method_{method_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )



async def ask_cities(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–æ–≤"""
    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
    )


async def ask_quantity(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:"
    )
router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤
temp_main_albums = {}
temp_additional_albums = {}


def generate_guid() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ GUID –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    return str(uuid.uuid4())


async def show_main_categories(message: Message, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()

    for cat_id, cat_data in config.AVITO_CATEGORIES.items():
        builder.button(text=cat_data["name"], callback_data=f"cat_{cat_id}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}üéØ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )


async def show_subcategories(message: Message, category_id: str, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_data = config.AVITO_CATEGORIES.get(category_id)
    if not category_data:
        await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    subcategories = category_data.get("subcategories", {})
    if not subcategories:
        await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return

    builder = InlineKeyboardBuilder()

    for subcat_id, subcat_name in subcategories.items():
        builder.button(text=subcat_name, callback_data=f"sub_{subcat_id}")

    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_categories")
    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {category_data['name']}:",
        reply_markup=builder.as_markup()
    )


async def show_price_type_options(message: Message, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", callback_data="price_fixed")
    builder.button(text="üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", callback_data="price_range")
    builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="price_skip")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}—É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n\n"
        "1) üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1234) - –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –≤ —Ñ–∞–π–ª–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ –æ–¥–Ω–∞ —Ü–µ–Ω–∞\n"
        "2) üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä 1200-1500) - –∫–∞–∂–¥–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n"
        "3) ‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å - —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –±—É–¥–µ—Ç",
        reply_markup=builder.as_markup()
    )


async def show_contact_methods(message: Message, user_name: str = ""):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="contact_both")
    builder.button(text="üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="contact_phone")
    builder.button(text="üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="contact_message")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
        reply_markup=builder.as_markup()
    )


async def ask_additional_images(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    greeting = f"{user_name}, " if user_name else ""

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ state
    data = await state.get_data()
    main_count = len(data.get('main_images', []))

    await message.answer(
        f"{greeting}—Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        f"üì∏ –£ –≤–∞—Å —É–∂–µ {main_count} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n"
        "‚Ä¢ üì∑ –ü–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ\n"
        "‚Ä¢ üñºÔ∏è –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∞–ª—å–±–æ–º)\n"
        "‚Ä¢ üì§ –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n"
        "üí° –í—Å–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —Å—á–µ—Ç—á–∏–∫\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images\n\n"
        "üí° –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images"
    )

async def ask_shuffle_images(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞, –ø–µ—Ä–µ–º–µ—à–∞—Ç—å", callback_data="shuffle_yes")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="shuffle_no")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    main_count = len(data.get('main_images', []))
    additional_count = len(data.get('additional_images', []))
    total_count = main_count + additional_count

    await message.answer(
        f"{greeting}–Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å —Ñ–æ—Ç–æ?\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ:\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ: {main_count}\n"
        f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {additional_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_count}\n\n"
        "–ü—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –≤—Å–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.",
        reply_markup=builder.as_markup()
    )


async def ask_avito_delivery(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="delivery_yes")
    builder.button(text="‚ùå –ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ", callback_data="delivery_no")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫—É?",
        reply_markup=builder.as_markup()
    )


async def ask_delivery_services(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
    builder = InlineKeyboardBuilder()

    delivery_services = [
        ("–í—ã–∫–ª—é—á–µ–Ω–∞", "disabled"),
        ("–ü–í–ó", "pickup"),
        ("–ö—É—Ä—å–µ—Ä", "courier"),
        ("–ü–æ—Å—Ç–∞–º–∞—Ç", "postamat"),
        ("–°–≤–æ–π –∫—É—Ä—å–µ—Ä", "own_courier"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö", "sdek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏", "business_lines"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä DPD", "dpd"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–≠–ö", "pek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", "russian_post"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö –∫—É—Ä—å–µ—Ä", "sdek_courier"),
        ("–°–∞–º–æ–≤—ã–≤–æ–∑ —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π", "self_pickup_online")
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã
    data = await state.get_data()
    selected_services = data.get('delivery_services', [])

    for service_name, service_code in delivery_services:
        if service_code in selected_services:
            builder.button(text=f"‚úÖ {service_name}", callback_data=f"service_{service_code}")
        else:
            builder.button(text=service_name, callback_data=f"service_{service_code}")

    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"service_done")
    builder.adjust(1)

    selected_text = ", ".join([name for name, code in delivery_services if code in selected_services])

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
        f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {selected_text or '–Ω–∏—á–µ–≥–æ'}\n\n"
        "üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞. –†—è–¥–æ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ—è–≤–∏—Ç—Å—è –≥–∞–ª–æ—á–∫–∞.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
        reply_markup=builder.as_markup()
    )


async def update_delivery_services_keyboard(message: Message, state: FSMContext, user_name: str = ""):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
    data = await state.get_data()
    selected_services = data.get('delivery_services', [])

    builder = InlineKeyboardBuilder()

    delivery_services = [
        ("–í—ã–∫–ª—é—á–µ–Ω–∞", "disabled"),
        ("–ü–í–ó", "pickup"),
        ("–ö—É—Ä—å–µ—Ä", "courier"),
        ("–ü–æ—Å—Ç–∞–º–∞—Ç", "postamat"),
        ("–°–≤–æ–π –∫—É—Ä—å–µ—Ä", "own_courier"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö", "sdek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏", "business_lines"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä DPD", "dpd"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–≠–ö", "pek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", "russian_post"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö –∫—É—Ä—å–µ—Ä", "sdek_courier"),
        ("–°–∞–º–æ–≤—ã–≤–æ–∑ —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π", "self_pickup_online")
    ]

    for service_name, service_code in delivery_services:
        if service_code in selected_services:
            builder.button(text=f"‚úÖ {service_name}", callback_data=f"service_{service_code}")
        else:
            builder.button(text=service_name, callback_data=f"service_{service_code}")

    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"service_done")
    builder.adjust(1)

    selected_text = ", ".join([name for name, code in delivery_services if code in selected_services])

    greeting = f"{user_name}, " if user_name else ""
    await message.edit_text(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
        f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {selected_text or '–Ω–∏—á–µ–≥–æ'}\n\n"
        "üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞. –†—è–¥–æ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ—è–≤–∏—Ç—Å—è –≥–∞–ª–æ—á–∫–∞.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
        reply_markup=builder.as_markup()
    )


async def ask_start_date(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    greeting = f"{user_name}, " if user_name else ""
    calendar = ProductCalendar()

    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏:\n\n"
        "üìÖ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ "
        "(–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏).",
        reply_markup=await calendar.start_calendar()
    )


def load_brands() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ XML —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        return load_brands_standard()
    except Exception as e:
        print(f"Standard parsing failed: {e}")
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        return load_brands_fallback()


def load_brands_standard() -> List[str]:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ XML"""
    try:
        tree = ET.parse('brands.xml')
        root = tree.getroot()

        brands = []

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML
        if root.tag == 'Brendy_fashion':
            for brand_elem in root.findall('brand'):
                brand_name = brand_elem.get('name')
                if brand_name:
                    brands.append(brand_name)
        else:
            # –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã brand
            for brand_elem in root.findall('.//brand'):
                brand_name = brand_elem.get('name')
                if brand_name:
                    brands.append(brand_name)
                elif brand_elem.text and brand_elem.text.strip():
                    brands.append(brand_elem.text.strip())

        return brands

    except ET.ParseError:
        # –ï—Å–ª–∏ XML —Å –æ—à–∏–±–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        raise Exception("XML parse error")


def load_brands_fallback() -> List[str]:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–µ–Ω–¥–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        with open('brands.xml', 'r', encoding='utf-8') as f:
            content = f.read()

        brands = []

        # –°–ø–æ—Å–æ–± 1: –ò—â–µ–º name="–∑–Ω–∞—á–µ–Ω–∏–µ"
        pattern1 = r'name="([^"]*)"'
        matches1 = re.findall(pattern1, content)
        brands.extend(matches1)

        # –°–ø–æ—Å–æ–± 2: –ò—â–µ–º <brand>—Ç–µ–∫—Å—Ç</brand>
        pattern2 = r'<brand[^>]*>([^<]+)</brand>'
        matches2 = re.findall(pattern2, content)
        brands.extend([match.strip() for match in matches2])

        # –°–ø–æ—Å–æ–± 3: –ò—â–µ–º –ª—é–±—ã–µ —Ç–µ–≥–∏ brand —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        pattern3 = r'<brand\s+[^>]*name\s*=\s*["\']([^"\']*)["\']'
        matches3 = re.findall(pattern3, content)
        brands.extend(matches3)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        unique_brands = list(set([brand for brand in brands if brand.strip()]))

        print(f"Fallback loaded {len(unique_brands)} brands")
        return unique_brands

    except Exception as e:
        print(f"Fallback loading failed: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤
        return get_default_brands()


def get_default_brands() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return [
        "Nike", "Adidas", "Reebok", "Puma", "No name", "–î—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥",
        "Zara", "H&M", "Uniqlo", "Gucci", "Louis Vuitton"
    ]


def is_valid_brand(brand: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±—Ä–µ–Ω–¥–∞ –≤ –±–∞–∑–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è)"""
    brands = load_brands()

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    brand_lower = brand.lower().strip()

    for existing_brand in brands:
        if existing_brand.lower().strip() == brand_lower:
            return True

    return False


def search_brands(query: str) -> List[str]:
    """–ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–æ–≤ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é"""
    brands = load_brands()
    query_lower = query.lower().strip()

    matches = []
    for brand in brands:
        if query_lower in brand.lower():
            matches.append(brand)

    return matches[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

async def ask_brand_manual(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –±—Ä–µ–Ω–¥–∞ —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏"""
    greeting = f"{user_name}, " if user_name else ""

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    sample_brands = load_brands()[:5]  # –ü–µ—Ä–≤—ã–µ 5 –±—Ä–µ–Ω–¥–æ–≤ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä

    sample_text = "\n".join([f"‚Ä¢ {brand}" for brand in sample_brands])

    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:\n\n"
        f"üìã –ü—Ä–∏–º–µ—Ä—ã –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ –±–∞–∑—ã:\n{sample_text}\n\n"
        "üí° –ë—Ä–µ–Ω–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
        "–ï—Å–ª–∏ –±—Ä–µ–Ω–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑.\n"
        "üîç –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )


async def complete_product_creation(message: Message, state: FSMContext, user_name: str = ""):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
    try:
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['title', 'description', 'category', 'contact_phone']
        missing_fields = [field for field in required_fields if not data.get(field)]

        if missing_fields:
            await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ —Å—Ç–∞—Ä—Ç–∞
        start_date_info = "—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        if data.get('start_datetime'):
            start_date_info = data['start_datetime'].strftime('%d.%m.%Y %H:%M')
        elif data.get('start_date'):
            start_date_info = data['start_date'].strftime('%d.%m.%Y') + " (–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω—ã–µ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
        main_images = data.get('main_images', [])
        additional_images = data.get('additional_images', [])
        all_images = main_images + additional_images

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if data.get('shuffle_images', False) and all_images:
            random.shuffle(all_images)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        placement_method = data.get('placement_method', '')
        placement_type = data.get('placement_type', '')

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö
        cities = data.get('cities', [])
        selected_cities = data.get('selected_cities', [])
        quantity = data.get('quantity', 1)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if selected_cities and not cities:
            cities = [city['name'] for city in selected_cities]

        # –ï—Å–ª–∏ cities - –Ω–µ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
        if cities and not isinstance(cities, list):
            cities = [cities]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç—Ä–æ
        metro_data = {}
        if placement_method == "metro":
            metro_city = data.get('metro_city')
            metro_stations = data.get('selected_metro_stations', [])
            if metro_city and metro_stations:
                metro_data = {
                    'metro_city': metro_city,
                    'metro_stations': metro_stations,
                    'metro_quantity': quantity
                }
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≥–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                if metro_city not in cities:
                    cities.append(metro_city)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
        product_data = {
            'product_id': data.get('product_id'),
            'title': data.get('title'),
            'description': data.get('description'),
            'price': data.get('price'),
            'price_type': data.get('price_type', 'none'),
            'price_min': data.get('price_min'),
            'price_max': data.get('price_max'),
            'category': data.get('category'),
            'category_name': data.get('category_name', ''),
            'contact_phone': data.get('contact_phone'),
            'display_phone': data.get('display_phone', ''),
            'contact_method': data.get('contact_method', 'both'),
            'main_images': main_images,
            'additional_images': additional_images,
            'all_images': all_images,
            'total_images': len(all_images),
            'shuffle_images': data.get('shuffle_images', False),
            'avito_delivery': data.get('avito_delivery', False),
            'delivery_services': data.get('delivery_services', []),
            'delivery_discount': data.get('delivery_discount', 'none'),
            'multioffer': data.get('multioffer', False),
            'brand': data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'size': data.get('size', ''),
            'condition': data.get('condition', ''),
            'sale_type': data.get('sale_type', ''),
            'placement_type': placement_type,
            'placement_method': placement_method,
            'cities': cities,
            'selected_cities': selected_cities,
            'quantity': quantity,
            # –î–∞–Ω–Ω—ã–µ –æ –º–µ—Ç—Ä–æ
            **metro_data,
            # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
            'start_date': data.get('start_date'),
            'start_time': data.get('start_time'),
            'start_datetime': data.get('start_datetime')
        }

        await db.add_product(message.from_user.id, product_data)

        await state.clear()
        await db.clear_user_state(message.from_user.id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        main_count = len(main_images)
        additional_count = len(additional_images)
        delivery_services = data.get('delivery_services', [])
        delivery_discount = data.get('delivery_discount', 'none')
        multioffer = data.get('multioffer', False)

        # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        delivery_text = "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
        if data.get('avito_delivery', False) and delivery_services:
            delivery_names = {
                "disabled": "–í—ã–∫–ª—é—á–µ–Ω–∞",
                "pickup": "–ü–í–ó",
                "courier": "–ö—É—Ä—å–µ—Ä",
                "postamat": "–ü–æ—Å—Ç–∞–º–∞—Ç",
                "own_courier": "–°–≤–æ–π –∫—É—Ä—å–µ—Ä",
                "sdek": "–°–î–≠–ö",
                "business_lines": "–î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏",
                "dpd": "DPD",
                "pek": "–ü–≠–ö",
                "russian_post": "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
                "sdek_courier": "–°–î–≠–ö –∫—É—Ä—å–µ—Ä",
                "self_pickup_online": "–°–∞–º–æ–≤—ã–≤–æ–∑ —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π"
            }
            selected_names = [delivery_names.get(code, code) for code in delivery_services if code != "disabled"]
            delivery_text = ", ".join(selected_names) if selected_names else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

        discount_names = {
            "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
            "discount": "üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
            "none": "üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏"
        }

        condition_names = {
            "new_with_tag": "üÜï –ù–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π",
            "excellent": "‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ",
            "good": "üëç –•–æ—Ä–æ—à–µ–µ",
            "satisfactory": "‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
        }

        sale_type_names = {
            "resale": "üõí –¢–æ–≤–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
            "manufacturer": "üè≠ –¢–æ–≤–∞—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è",
            "personal": "üë§ –ü—Ä–æ–¥–∞—é —Å–≤–æ—ë"
        }

        contact_method_names = {
            "both": "üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
            "phone": "üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
            "message": "üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏–∏"
        }

        price_info = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        if data.get('price_type') == 'fixed' and data.get('price'):
            price_info = f"{data['price']} —Ä—É–±. (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)"
        elif data.get('price_type') == 'range' and data.get('price_min') and data.get('price_max'):
            price_info = f"{data['price_min']}-{data['price_max']} —Ä—É–±. (–¥–∏–∞–ø–∞–∑–æ–Ω)"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        placement_info = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if placement_method == "exact_cities" and cities:
            placement_info = f"–ü–æ –≥–æ—Ä–æ–¥–∞–º: {', '.join(cities)} ({len(cities)} –≥–æ—Ä–æ–¥–æ–≤)"
        elif placement_method == "by_quantity" and cities:
            placement_info = f"–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: {quantity} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ {len(cities)} –≥–æ—Ä–æ–¥–∞—Ö"
        elif placement_method == "multiple_in_city" and cities:
            placement_info = f"–ú—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ {cities[0]}: {quantity} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        elif placement_method == "metro" and metro_data:
            placement_info = f"–ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ: {metro_data['metro_city']}, {quantity} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        elif placement_type == "cities":
            placement_info = "–ü–æ –≥–æ—Ä–æ–¥–∞–º (–º–µ—Ç–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω)"
        elif placement_type == "metro":
            placement_info = "–ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ (–º–µ—Ç–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω)"

        await message.answer(
            f"{user_name}, ‚úÖ —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title'][:50]}...\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {len(data['description'])} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {price_info}\n"
            f"‚Ä¢ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {start_date_info}\n"
            f"‚Ä¢ –ë—Ä–µ–Ω–¥: {data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition_names.get(data.get('condition', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_type_names.get(data.get('sale_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {contact_method_names.get(data.get('contact_method', 'both'), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('display_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_info}\n"
            f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ç–æ: {main_count}\n"
            f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ: {additional_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(all_images)}\n"
            f"‚Ä¢ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ: {'‚úÖ –î–∞' if data.get('shuffle_images') else '‚ùå –ù–µ—Ç'}\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}\n"
            f"‚Ä¢ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {discount_names.get(delivery_discount, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –ú—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {'‚úÖ –î–∞' if multioffer else '‚ùå –ù–µ—Ç'}\n\n"
            f"üìä –ò—Ç–æ–≥: —Å–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä —Å {len(all_images)} —Ñ–æ—Ç–æ –¥–ª—è {quantity} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/new_product - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n"
            f"/my_products - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n"
            f"/generate_xml - —Å–æ–∑–¥–∞—Ç—å XML —Ñ–∞–π–ª –¥–ª—è Avito"
        )

    except Exception as e:
        print(f"Error in complete_product_creation: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_product –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
        )


async def ask_start_time(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    greeting = f"{user_name}, " if user_name else ""

    builder = InlineKeyboardBuilder()

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
    popular_times = [
        "09:00", "10:00", "11:00", "12:00",
        "13:00", "14:00", "15:00", "16:00",
        "17:00", "18:00", "19:00", "20:00"
    ]

    for time in popular_times:
        builder.button(text=time, callback_data=f"time_{time}")

    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="time_custom")
    builder.adjust(3)

    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏:\n\n"
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=builder.as_markup()
    )

async def ask_phone_number(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è"""
        greeting = f"{user_name}, " if user_name else ""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
                [KeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"{greeting}—É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "  ‚Äî +7 (495) 777-10-66\n"
            "  ‚Äî 8 905 207 04 90\n"
            "  ‚Äî 89052070490",
            reply_markup=keyboard
        )


async def ask_metro_city(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å –º–µ—Ç—Ä–æ"""
    metro_cities = get_metro_cities()

    if not metro_cities:
        await message.answer(
            "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ —Å –º–µ—Ç—Ä–æ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è."
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        await ask_placement_type(message, user_name)
        return

    builder = InlineKeyboardBuilder()

    for city in metro_cities:
        stations_count = len(get_metro_stations(city))
        builder.button(
            text=f"üöá {city} ({stations_count} —Å—Ç–∞–Ω—Ü–∏–π)",
            callback_data=f"metro_city_{city}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="back_to_placement_type")
    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –º–µ—Ç—Ä–æ:",
        reply_markup=builder.as_markup()
    )
# ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
@router.callback_query(F.data == "back_to_placement_type", StateFilter(ProductStates.waiting_for_metro_city))
async def back_to_placement_type(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –º–µ—Ç—Ä–æ"""
    user_name = callback.from_user.first_name
    await state.set_state(ProductStates.waiting_for_placement_type)
    await callback.message.edit_text(f"{user_name}, –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.")
    await ask_placement_type(callback.message, user_name)


@router.callback_query(F.data.startswith("metro_city_"), StateFilter(ProductStates.waiting_for_metro_city))
async def process_metro_city(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å –º–µ—Ç—Ä–æ"""
    city_name = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º "metro_city_"

    stations = get_metro_stations(city_name)
    if not stations:
        await callback.answer("‚ùå –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö –º–µ—Ç—Ä–æ", show_alert=True)
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥
        await ask_metro_city(callback.message, callback.from_user.first_name)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å—Ç–∞–Ω—Ü–∏—è—Ö
    await state.update_data(
        metro_city=city_name,
        metro_stations=stations,
        cities=[city_name],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        placement_method="metro"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    await state.set_state(ProductStates.waiting_for_metro_quantity)

    user_name = callback.from_user.first_name

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π
    sample_stations = ", ".join(stations[:5])

    await callback.message.edit_text(
        f"{user_name}, –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: üöá {city_name}\n\n"
        f"üìç –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π: {sample_stations}...\n"
        f"üìä –í—Å–µ–≥–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(stations)}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:"
    )


async def ask_metro_quantity(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–µ—Ç—Ä–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    greeting = f"{user_name}, " if user_name else ""

    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data="back_to_metro_city")
    builder.adjust(1)

    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n"
        "üöá –û–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ\n"
        "üìç –ö–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é\n"
        "üè† –ê–¥—Ä–µ—Å–∞ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞–Ω—Ü–∏—è–º–∏",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "back_to_metro_city", StateFilter(ProductStates.waiting_for_metro_quantity))
async def back_to_metro_city(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞ –º–µ—Ç—Ä–æ –∏–∑ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    user_name = callback.from_user.first_name
    await state.set_state(ProductStates.waiting_for_metro_city)
    await callback.message.edit_text(f"{user_name}, –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞.")
    await ask_metro_city(callback.message, user_name)

@router.message(StateFilter(ProductStates.waiting_for_metro_quantity))
async def process_metro_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–µ—Ç—Ä–æ"""
    try:
        quantity = int(message.text.strip())

        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            return

        if quantity > 100:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:")
            return

        data = await state.get_data()
        city_name = data.get('metro_city')
        all_stations = data.get('metro_stations', [])

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
        import random
        if quantity <= len(all_stations):
            selected_stations = random.sample(all_stations, quantity)
        else:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ–º —Å—Ç–∞–Ω—Ü–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
            selected_stations = all_stations.copy()
            while len(selected_stations) < quantity:
                selected_stations.append(random.choice(all_stations))

        await state.update_data(
            quantity=quantity,
            selected_metro_stations=selected_stations,
            placement_method="metro"
        )

        user_name = message.from_user.first_name

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        sample_display = ", ".join(selected_stations[:3])
        if len(selected_stations) > 3:
            sample_display += f" –∏ –µ—â—ë {len(selected_stations) - 3}"

        await message.answer(
            f"{user_name}, ‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –º–µ—Ç—Ä–æ!\n\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city_name}\n"
            f"üöá –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(set(selected_stations))}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {quantity}\n"
            f"üìç –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π: {sample_display}\n\n"
            "üè† –ö–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç –∞–¥—Ä–µ—Å —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π –º–µ—Ç—Ä–æ"
        )

        await state.set_state(ProductStates.waiting_for_start_date)
        await ask_start_date(message, user_name)

    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")


# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è
@router.message(StateFilter(ProductStates.waiting_for_city_input))
async def handle_city_input(message: Message, state: FSMContext):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    data = await state.get_data()
    placement_method = data.get('placement_method')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤":
        await finish_city_input(message, state)
        return

    if placement_method == "multiple_in_city":
        await process_single_city_for_multiple(message, state)
    else:
        await process_city_input(message, state)


async def process_single_city_for_multiple(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    city_name = message.text.strip()

    if not city_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return

    # –ò—â–µ–º –≥–æ—Ä–æ–¥
    result = await validate_city_nominatim(city_name)

    if result['valid']:
        city_data = result['data']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        selected_cities = [{
            'name': city_data['name'],
            'full_address': city_data['full_address'],
            'lat': city_data.get('lat'),
            'lon': city_data.get('lon'),
            'type': city_data.get('type')
        }]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(
            selected_cities=selected_cities,
            cities=[city_data['name']]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        )
        await state.set_state(ProductStates.waiting_for_quantity)

        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
            f"üèôÔ∏è {city_data['name']}\n"
            f"üìç {city_data['full_address']}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=ReplyKeyboardRemove()
        )

    else:
        await message.answer(
            f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )

async def ask_single_city_for_multiple(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    greeting = f"{user_name}, " if user_name else ""

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n\n"
        "üèôÔ∏è –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "üîç –ì–æ—Ä–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥",
        reply_markup=keyboard
    )


@router.message(StateFilter(ProductStates.waiting_for_city_input))
async def process_city_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤":
        await finish_city_input(message, state)
        return

    city_name = message.text.strip()

    if not city_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return

    # –ò—â–µ–º –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ Nominatim
    result = await validate_city_nominatim(city_name)

    if result['valid']:
        city_data = result['data']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(temp_city=city_data)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data="city_confirm")
        builder.button(text="‚ùå –ù–µ—Ç, –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_reject")
        builder.adjust(2)

        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥:\n"
            f"üèôÔ∏è {city_data['name']}\n"
            f"üìç {city_data['full_address']}\n\n"
            "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥?",
            reply_markup=builder.as_markup()
        )

        await state.set_state(ProductStates.waiting_for_city_confirmation)

    else:
        await message.answer(
            f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )


@router.message(StateFilter(ProductStates.waiting_for_quantity))
async def handle_quantity_input(message: Message, state: FSMContext):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    data = await state.get_data()
    placement_method = data.get('placement_method')

    if placement_method == "multiple_in_city":
        await process_quantity_for_multiple(message, state)
    elif placement_method == "by_quantity":
        await process_quantity_from_xml(message, state)
    elif placement_method == "metro":
        await process_metro_quantity(message, state)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        await process_general_quantity(message, state)


@router.message(StateFilter(ProductStates.waiting_for_quantity))
async def process_quantity_from_xml(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ –∏–∑ XML"""
    try:
        quantity = int(message.text.strip())
        cities = load_cities_from_xml()

        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            return

        if quantity > len(cities):
            await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(cities)}. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:")
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
        selected_cities = [city['name'] for city in cities[:quantity]]

        await state.update_data(
            cities=selected_cities,
            quantity=quantity
        )

        user_name = message.from_user.first_name
        cities_list = ", ".join(selected_cities)

        await message.answer(
            f"{user_name}, ‚úÖ –≤—ã–±—Ä–∞–Ω–æ {quantity} –≥–æ—Ä–æ–¥–æ–≤:\n{cities_list}"
        )

        await state.set_state(ProductStates.waiting_for_start_date)
        await ask_start_date(message, user_name)

    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

async def process_quantity_for_multiple(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ"""
    try:
        quantity = int(message.text.strip())

        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            return

        if quantity > 100:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:")
            return

        data = await state.get_data()
        selected_cities = data.get('selected_cities', [])

        if not selected_cities:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞."
            )
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
        city_data = selected_cities[0]

        await state.update_data(
            quantity=quantity,
            cities=[city_data['name']],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            selected_cities=selected_cities  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        )

        user_name = message.from_user.first_name

        await message.answer(
            f"{user_name}, ‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city_data['name']}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {quantity}\n"
            f"üìç –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {quantity} —Ä–∞–∑–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"
        )

        await state.set_state(ProductStates.waiting_for_start_date)
        await ask_start_date(message, user_name)

    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")


async def process_general_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–±—â–µ–≥–æ —Å–ª—É—á–∞—è"""
    try:
        quantity = int(message.text.strip())

        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            return

        await state.update_data(quantity=quantity)

        user_name = message.from_user.first_name
        await message.answer(f"{user_name}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {quantity}")

        await state.set_state(ProductStates.waiting_for_start_date)
        await ask_start_date(message, user_name)

    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

async def finish_city_input(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])

    if not selected_cities:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤", callback_data="cities_restart")
        builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –≥–æ—Ä–æ–¥–æ–≤", callback_data="cities_skip")
        builder.adjust(1)

        await message.answer(
            "‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    city_names = [city['name'] for city in selected_cities]
    await state.update_data(cities=city_names)
    await state.set_state(ProductStates.waiting_for_start_date)

    user_name = message.from_user.first_name
    cities_list = ", ".join(city_names)

    await message.answer(
        f"{user_name}, ‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤!\n"
        f"üèôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(selected_cities)}\n"
        f"üìç –°–ø–∏—Å–æ–∫: {cities_list}",
        reply_markup=ReplyKeyboardRemove()
    )

    await ask_start_date(message, user_name)


@router.message(StateFilter(ProductStates.waiting_for_city_input))
async def process_single_city_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city_name = message.text.strip()

    if not city_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return

    # –ò—â–µ–º –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ Nominatim
    result = await validate_city_nominatim(city_name)

    if result['valid']:
        city_data = result['data']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(temp_city=city_data)

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data="city_confirm")
        builder.button(text="‚ùå –ù–µ—Ç, –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_reject")
        builder.adjust(2)

        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥:\n"
            f"üèôÔ∏è {city_data['name']}\n"
            f"üìç {city_data['full_address']}\n\n"
            "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥?",
            reply_markup=builder.as_markup()
        )

        await state.set_state(ProductStates.waiting_for_city_confirmation)

    else:
        await message.answer(
            f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )


@router.callback_query(F.data == "cities_restart", StateFilter(ProductStates.waiting_for_city_input))
async def restart_city_input(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    await state.update_data(selected_cities=[])
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
    await callback.answer()


@router.callback_query(F.data == "cities_skip", StateFilter(ProductStates.waiting_for_city_input))
async def skip_city_input(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    await state.update_data(cities=[])
    await state.set_state(ProductStates.waiting_for_start_date)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(f"{user_name}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≥–æ—Ä–æ–¥–∞–º.")

    await ask_start_date(callback.message, user_name)


@router.callback_query(StateFilter(ProductStates.waiting_for_city_confirmation), F.data == "city_confirm")
async def confirm_city(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    data = await state.get_data()
    city_data = data.get('temp_city')
    selected_cities = data.get('selected_cities', [])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å–ø–∏—Å–æ–∫
    selected_cities.append({
        'name': city_data['name'],
        'full_address': city_data['full_address'],
        'lat': city_data.get('lat'),
        'lon': city_data.get('lon'),
        'type': city_data.get('type')
    })

    await state.update_data(selected_cities=selected_cities)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
    await state.set_state(ProductStates.waiting_for_city_input)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.edit_text(
        f"‚úÖ –ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"üèôÔ∏è {city_data['name']}\n"
        f"üìç {city_data['full_address']}\n\n"
        f"üìä –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {len(selected_cities)}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥:"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤:",
        reply_markup=keyboard
    )


@router.callback_query(StateFilter(ProductStates.waiting_for_city_confirmation), F.data == "city_reject")
async def reject_city(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
    await state.set_state(ProductStates.waiting_for_city_input)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:")

@router.message(StateFilter(ProductStates.waiting_for_main_images), F.media_group_id)
async def handle_main_images_album(message: Message, album: list[Message], state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not album:
        return

    photo_files = []

    for msg in album:
        if msg.photo:
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            largest_photo = msg.photo[-1]
            photo_files.append(largest_photo.file_id)

    if photo_files:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        data = await state.get_data()
        main_images = data.get('main_images', [])
        main_images.extend(photo_files)

        await state.update_data(main_images=main_images)

        user_name = message.from_user.first_name
        await message.answer(
            f"{user_name}, ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º —Å {len(photo_files)} –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ–æ—Ç–æ! –í—Å–µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(main_images)}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_main_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
        )


@router.message(StateFilter(ProductStates.waiting_for_additional_images), F.media_group_id)
async def handle_additional_images_album(message: Message, album: list[Message], state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not album:
        return

    photo_files = []

    for msg in album:
        if msg.photo:
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            largest_photo = msg.photo[-1]
            photo_files.append(largest_photo.file_id)

    if photo_files:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        data = await state.get_data()
        additional_images = data.get('additional_images', [])
        additional_images.extend(photo_files)

        await state.update_data(additional_images=additional_images)

        user_name = message.from_user.first_name
        total_count = len(additional_images)

        await message.answer(
            f"{user_name}, ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º —Å {len(photo_files)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ! –í—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {total_count}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
        )

@router.message(Command("new_product"))
async def new_product_command(message: Message, state: FSMContext):
    await state.clear()
    await db.clear_user_state(message.from_user.id)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º GUID –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    product_guid = generate_guid()
    await state.update_data(
        product_id=product_guid,
        main_images=[],
        additional_images=[],
        shuffle_images=False,
        avito_delivery=False,
        delivery_services=[]
    )

    await state.set_state(ProductStates.waiting_for_category)

    user_name = message.from_user.first_name
    await show_main_categories(message, user_name)


@router.callback_query(F.data == "back_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await state.set_state(ProductStates.waiting_for_category)
    user_name = callback.from_user.first_name
    await show_main_categories(callback.message, user_name)


@router.callback_query(F.data.startswith("cat_"))
async def process_main_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    API_KEY = "11596b4e-f890-4a88-b439-e9da09bb9c03"
    #validation_result = await validate_city_nominatim("–º–∞–∑—Å–∫–≤–∞")
    #print(validation_result)
    #validation_result2 = await validate_city_nominatim("–í–æ—Ä–æ–Ω–µ–∂")
    #print(validation_result2)
    #validation_result3 = await validate_city_nominatim("–Ø–º–Ω–æ–µ –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å")
    #print(validation_result3)
    category_id = callback.data[4:]  # –£–±–∏—Ä–∞–µ–º "cat_"
    category_data = config.AVITO_CATEGORIES.get(category_id)

    if not category_data:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.update_data(main_category_id=category_id, main_category_name=category_data["name"])
    await state.set_state(ProductStates.waiting_for_subcategory)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(f"{user_name}, –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data['name']}")
    await show_subcategories(callback.message, category_id, user_name)


@router.callback_query(F.data.startswith("sub_"))
async def process_subcategory(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcategory_id = callback.data[4:]  # –£–±–∏—Ä–∞–µ–º "sub_"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    main_category_id = data.get('main_category_id')
    main_category_name = data.get('main_category_name')

    if not main_category_id:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_data = config.AVITO_CATEGORIES.get(main_category_id)
    subcategories = category_data.get("subcategories", {})
    subcategory_name = subcategories.get(subcategory_id)

    if not subcategory_name:
        await callback.answer("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Avito
    avito_category_id = config.CATEGORY_IDS.get(subcategory_id, config.CATEGORY_IDS.get(main_category_id))

    await state.update_data(
        category=avito_category_id,
        category_name=f"{main_category_name} - {subcategory_name}",
        subcategory_name=subcategory_name
    )
    await state.set_state(ProductStates.waiting_for_title)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, ‚úÖ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {main_category_name} - {subcategory_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"
    )


@router.message(StateFilter(ProductStates.waiting_for_title))
async def process_product_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞"""
    title = message.text.strip()
    if not title:
        await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        return

    if len(title) > 100:
        await message.answer("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        return

    await state.update_data(title=title)
    await state.set_state(ProductStates.waiting_for_description)

    user_name = message.from_user.first_name
    await message.answer(
        f"{user_name}, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–µ –º–µ–Ω–µ–µ 100 –∏ –Ω–µ –±–æ–ª–µ–µ 3500 —Å–∏–º–≤–æ–ª–æ–≤:"
    )


@router.message(StateFilter(ProductStates.waiting_for_description))
async def process_product_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    description = message.text.strip()

    if len(description) < 100:
        await message.answer(
            "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return

    if len(description) > 3500:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 3500 —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(description=description)
    await state.set_state(ProductStates.waiting_for_price_type)

    user_name = message.from_user.first_name
    await show_price_type_options(message, user_name)


@router.callback_query(F.data == "price_fixed")
async def process_price_fixed(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
    await state.update_data(price_type="fixed")
    await state.set_state(ProductStates.waiting_for_price)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500):"
    )


@router.callback_query(F.data == "price_range")
async def process_price_range(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
    await state.update_data(price_type="range")
    await state.set_state(ProductStates.waiting_for_price_range)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ò–ù–ò–ú–£–ú-–ú–ê–ö–°–ò–ú–£–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200-1500):"
    )


@router.callback_query(F.data == "price_skip")
async def process_price_skip(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ü–µ–Ω—ã"""
    await state.update_data(price_type="none", price=None, price_min=None, price_max=None)
    await state.set_state(ProductStates.waiting_for_phone)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, —Ü–µ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏."
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π
    await ask_phone_number(callback.message, user_name)

@router.message(StateFilter(ProductStates.waiting_for_price))
async def process_fixed_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
    try:
        price = int(message.text.strip())
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(price=price, price_min=None, price_max=None)
        await state.set_state(ProductStates.waiting_for_phone)

        user_name = message.from_user.first_name
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        await ask_phone_number(message, user_name)

    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")


@router.message(StateFilter(ProductStates.waiting_for_price_range))
async def process_price_range_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if '-' not in text:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ò–ù–ò–ú–£–ú-–ú–ê–ö–°–ò–ú–£–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200-1500):")
        return

    try:
        min_price, max_price = text.split('-')
        min_price = int(min_price.strip())
        max_price = int(max_price.strip())

        if min_price <= 0 or max_price <= 0:
            await message.answer("–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –µ—â–µ —Ä–∞–∑:")
            return

        if min_price >= max_price:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(price_min=min_price, price_max=max_price, price=None)
        await state.set_state(ProductStates.waiting_for_phone)

        user_name = message.from_user.first_name
        await message.answer(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_price}-{max_price} —Ä—É–±.")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        await ask_phone_number(message, user_name)

    except ValueError:
        await message.answer(
            "–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ò–ù–ò–ú–£–ú-–ú–ê–ö–°–ò–ú–£–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1200-1500):")

def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ +
    cleaned = re.sub(r'[^\d+]', '', phone)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if cleaned.startswith('8') and len(cleaned) == 11:
        cleaned = '+7' + cleaned[1:]
    elif cleaned.startswith('7') and len(cleaned) == 11:
        cleaned = '+' + cleaned
    elif len(cleaned) == 10:
        cleaned = '+7' + cleaned
    elif cleaned.startswith('+7') and len(cleaned) == 12:
        pass  # –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    elif cleaned.startswith('+') and len(cleaned) == 12:
        pass  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    return cleaned

def is_valid_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    normalized = normalize_phone(phone)

    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
    if re.match(r'^(\+7|7|8)\d{10}$', normalized.replace('+', '').replace(' ', '')):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    patterns = [
        r'^\+7\s?\(\d{3}\)\s?\d{3}-\d{2}-\d{2}$',
        r'^8\s?\(\d{3}\)\s?\d{3}-\d{2}-\d{2}$',
        r'^8\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$',
        r'^\+7\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$',
        r'^\d{11}$',
        r'^\d{10}$'
    ]

    cleaned_phone = re.sub(r'[^\d]', '', phone)
    if len(cleaned_phone) in [10, 11]:
        return True

    for pattern in patterns:
        if re.match(pattern, phone.strip()):
            return True

    return False

@router.message(StateFilter(ProductStates.waiting_for_phone), F.contact)
async def process_contact_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = message.contact
    phone_number = contact.phone_number

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    normalized_phone = normalize_phone(phone_number)

    if not is_valid_phone(normalized_phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    await state.update_data(contact_phone=normalized_phone, display_phone=phone_number)
    await state.set_state(ProductStates.waiting_for_contact_method)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {phone_number}",
        reply_markup=ReplyKeyboardRemove()
    )

    user_name = message.from_user.first_name
    await show_contact_methods(message, user_name)


@router.message(StateFilter(ProductStates.waiting_for_phone), F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def process_manual_phone_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
        "‚Äî +7 (495) 777-10-66\n"
        "‚Äî (81374) 4-55-75\n"
        "‚Äî 8 905 207 04 90\n"
        "‚Äî +7 905 2070490\n"
        "‚Äî 88123855085",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(StateFilter(ProductStates.waiting_for_phone))
async def process_phone_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ
    if phone == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        return

    if not is_valid_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
            "‚Äî +7 (495) 777-10-66\n"
            "‚Äî (81374) 4-55-75\n"
            "‚Äî 8 905 207 04 90\n"
            "‚Äî +7 905 2070490\n"
            "‚Äî 88123855085"
        )
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    normalized_phone = normalize_phone(phone)
    await state.update_data(contact_phone=normalized_phone, display_phone=phone)
    await state.set_state(ProductStates.waiting_for_contact_method)

    user_name = message.from_user.first_name
    await message.answer(f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {phone}")
    await show_contact_methods(message, user_name)

@router.callback_query(F.data.startswith("contact_"))
async def process_contact_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
    contact_method = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "contact_"

    contact_methods = {
        "both": "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
        "phone": "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        "message": "–í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
    }

    method_name = contact_methods.get(contact_method, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(contact_method=contact_method)
    await state.set_state(ProductStates.waiting_for_main_images)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {method_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç –û–°–ù–û–í–ù–´–ï —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).\n\n"
        "üì∏ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /finish_main_images"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.message(StateFilter(ProductStates.waiting_for_main_images), F.media_group_id)
async def process_main_album_images(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    media_group_id = message.media_group_id

    if media_group_id not in temp_main_albums:
        temp_main_albums[media_group_id] = {
            'user_id': message.from_user.id,
            'photos': [],
            'created_at': datetime.now()
        }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º
    if message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        largest_photo = message.photo[-1]
        temp_main_albums[media_group_id]['photos'].append(largest_photo.file_id)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ 10
    if len(temp_main_albums[media_group_id]['photos']) > 10:
        temp_main_albums[media_group_id]['photos'] = temp_main_albums[media_group_id]['photos'][:10]


@router.message(StateFilter(ProductStates.waiting_for_main_images), F.photo)
async def process_main_single_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.media_group_id:
        # –≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤ handle_main_images_album
        return

    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
    largest_photo = message.photo[-1]
    photo_file_id = largest_photo.file_id

    data = await state.get_data()
    main_images = data.get('main_images', [])
    main_images.append(photo_file_id)

    await state.update_data(main_images=main_images)

    user_name = message.from_user.first_name
    await message.answer(
        f"{user_name}, ‚úÖ –ø–æ–ª—É—á–µ–Ω–æ 1 –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –í—Å–µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(main_images)}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_main_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
    )


@router.message(StateFilter(ProductStates.waiting_for_additional_images), F.photo)
async def process_additional_single_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if message.media_group_id:
        # –≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤ handle_additional_images_album
        return

    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    data = await state.get_data()
    additional_images = data.get('additional_images', [])

    largest_photo = message.photo[-1]
    additional_images.append(largest_photo.file_id)

    await state.update_data(additional_images=additional_images)

    user_name = message.from_user.first_name
    await message.answer(
        f"{user_name}, ‚úÖ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(additional_images)}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish_additional_images —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
    )

@router.message(Command("finish_main_images"))
async def finish_main_images_command(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    data = await state.get_data()
    main_images = data.get('main_images', [])

    await state.set_state(ProductStates.waiting_for_additional_images)

    user_name = message.from_user.first_name
    if main_images:
        await message.answer(
            f"{user_name}, ‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –í—Å–µ–≥–æ: {len(main_images)}\n\n"
            "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º."
        )
    else:
        await message.answer(
            f"{user_name}, –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º."
        )

    await ask_additional_images(message, state, user_name)


@router.message(Command("cities_status"), StateFilter(ProductStates.waiting_for_city_input))
async def show_cities_status(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])

    if not selected_cities:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        return

    cities_text = "üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n\n"
    for i, city in enumerate(selected_cities, 1):
        cities_text += f"{i}. {city['name']}\n"
        cities_text += f"   üìç {city['full_address']}\n\n"

    cities_text += f"üìä –í—Å–µ–≥–æ: {len(selected_cities)} –≥–æ—Ä–æ–¥–æ–≤"

    await message.answer(cities_text)

@router.message(Command("finish_additional_images"))
async def finish_additional_images_command(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    data = await state.get_data()
    additional_images = data.get('additional_images', [])

    await state.set_state(ProductStates.waiting_for_shuffle_images)

    user_name = message.from_user.first_name

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    main_images = data.get('main_images', [])
    total_main = len(main_images)
    total_additional = len(additional_images)
    total_all = total_main + total_additional

    await message.answer(
        f"{user_name}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ:\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ: {total_main}\n"
        f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {total_additional}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_all}\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –ª–∏ —Ñ–æ—Ç–æ."
    )

    await ask_shuffle_images(message, state, user_name)

@router.callback_query(F.data.startswith("shuffle_"))
async def process_shuffle_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    shuffle_choice = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "shuffle_"

    shuffle_images = (shuffle_choice == "yes")
    await state.update_data(shuffle_images=shuffle_images)
    await state.set_state(ProductStates.waiting_for_avito_delivery)

    user_name = callback.from_user.first_name
    choice_text = "–ø–µ—Ä–µ–º–µ—à–∞–Ω—ã" if shuffle_images else "–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"

    await callback.message.edit_text(
        f"{user_name}, —Ñ–æ—Ç–æ –±—É–¥—É—Ç {choice_text}.\n\n"
        "–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."
    )

    await ask_avito_delivery(callback.message, user_name)

@router.callback_query(F.data.startswith("delivery_"))
async def process_delivery_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_choice = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "delivery_"

    avito_delivery = (delivery_choice == "yes")
    await state.update_data(avito_delivery=avito_delivery)

    user_name = callback.from_user.first_name

    if avito_delivery:
        await state.set_state(ProductStates.waiting_for_delivery_services)
        await ask_delivery_services(callback.message, state, user_name)
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        await state.set_state(ProductStates.waiting_for_multioffer)
        await ask_multioffer(callback.message, user_name)


@router.callback_query(F.data.startswith("service_"))
async def process_delivery_service(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    service_code = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "service_"

    if service_code == "done":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
        await state.set_state(ProductStates.waiting_for_delivery_discount)
        user_name = callback.from_user.first_name
        await ask_delivery_discount(callback.message, user_name)
        return

    data = await state.get_data()
    selected_services = data.get('delivery_services', [])

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–í—ã–∫–ª—é—á–µ–Ω–∞", –æ—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ –≤—ã–±–æ—Ä—ã
    if service_code == "disabled":
        selected_services = ["disabled"]
    elif "disabled" in selected_services:
        selected_services.remove("disabled")

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Å–ª—É–∂–±—ã
    if service_code in selected_services:
        selected_services.remove(service_code)
    else:
        selected_services.append(service_code)

    await state.update_data(delivery_services=selected_services)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—ã–±–æ—Ä–æ–≤
    await update_delivery_services_keyboard(callback.message, state, callback.from_user.first_name)


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

async def ask_delivery_discount(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    builder = InlineKeyboardBuilder()

    builder.button(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="discount_free")
    builder.button(text="üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="discount_discount")
    builder.button(text="üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏", callback_data="discount_none")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É?\n\n"
        "–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ 500 —Ä—É–±–ª–µ–π –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ - –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
        "‚Ä¢ üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É - —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ—è–≤—è—Ç—Å—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        "‚Ä¢ üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏ - —Å–∫–∏–¥–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–µ—Ç",
        reply_markup=builder.as_markup()
    )


async def ask_multioffer(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –æ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
    builder = InlineKeyboardBuilder()

    builder.button(text="‚úÖ –î–∞", callback_data="multioffer_yes")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data="multioffer_no")

    builder.adjust(2)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("discount_"))
async def process_delivery_discount(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    discount_type = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "discount_"

    discount_names = {
        "free": "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        "discount": "—Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
        "none": "–Ω–µ—Ç —Å–∫–∏–¥–∫–∏"
    }

    await state.update_data(delivery_discount=discount_type)
    await state.set_state(ProductStates.waiting_for_multioffer)

    user_name = callback.from_user.first_name
    discount_text = discount_names.get(discount_type, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    await callback.message.edit_text(
        f"{user_name}, —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {discount_text}\n\n"
        "–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
    )

    await ask_multioffer(callback.message, user_name)

@router.callback_query(F.data.startswith("multioffer_"))
async def process_multioffer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    multioffer_choice = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º "multioffer_"

    multioffer = (multioffer_choice == "yes")
    await state.update_data(multioffer=multioffer)

    user_name = callback.from_user.first_name
    multioffer_text = "–º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º" if multioffer else "–æ–±—ã—á–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"

    await callback.message.edit_text(
        f"{user_name}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {multioffer_text}.\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –±—Ä–µ–Ω–¥–∞ –≤—Ä—É—á–Ω—É—é
    await state.set_state(ProductStates.waiting_for_brand)
    await ask_brand_manual(callback.message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
@router.callback_query(F.data.startswith("brand_"))
async def process_brand(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞"""
    brand_data = callback.data[6:]  # –£–±–∏—Ä–∞–µ–º "brand_"

    if brand_data == "show_all":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–µ–Ω–¥—ã
        brands = load_brands()
        builder = InlineKeyboardBuilder()

        for brand in brands:
            builder.button(text=brand, callback_data=f"brand_{brand}")

        builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="brand_custom")
        builder.adjust(1)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=builder.as_markup()
        )
        return

    if brand_data == "custom":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        await state.set_state(ProductStates.waiting_for_brand)
        return

    await state.update_data(brand=brand_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    category_name = data.get('category_name', '')

    needs_size = any(size_cat in category_name for size_cat in SIZE_CATEGORIES)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(f"{user_name}, –±—Ä–µ–Ω–¥: {brand_data}")

    if needs_size:
        await state.set_state(ProductStates.waiting_for_size)
        await ask_size(callback.message, user_name)
    else:
        await state.set_state(ProductStates.waiting_for_condition)
        await ask_condition(callback.message, user_name)


@router.message(StateFilter(ProductStates.waiting_for_brand))
async def process_brand_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±—Ä–µ–Ω–¥–∞ —Å –ø–æ–∏—Å–∫–æ–º"""
    brand_input = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    if brand_input in ["‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥", "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        return

    if not brand_input:
        await message.answer("–ë—Ä–µ–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if is_valid_brand(brand_input):
        await state.update_data(brand=brand_input)
        await process_brand_success(message, state, message.from_user.first_name)
        return

    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
    similar_brands = search_brands(brand_input)

    if similar_brands:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –±—Ä–µ–Ω–¥—ã
        builder = InlineKeyboardBuilder()

        for similar_brand in similar_brands:
            builder.button(text=similar_brand, callback_data=f"exact_brand_{similar_brand}")

        builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥", callback_data="br_retry")
        builder.adjust(1)

        similar_list = "\n".join([f"‚Ä¢ {brand}" for brand in similar_brands])

        await message.answer(
            f"‚ùå –ë—Ä–µ–Ω–¥ '{brand_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ:\n\n"
            f"{similar_list}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            f"‚ùå –ë—Ä–µ–Ω–¥ '{brand_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ –µ—â–µ —Ä–∞–∑:"
        )

@router.callback_query(F.data == "br_retry", StateFilter(ProductStates.waiting_for_brand))
async def process_brand_retry(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –±—Ä–µ–Ω–¥–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è ProductStates.waiting_for_brand
    await callback.answer()


async def ask_bag_type(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –≤–∏–¥–∞ —Å—É–º–∫–∏"""
    bag_params = get_bag_parameters()
    bag_type_params = bag_params.get('bag_type', {})

    builder = InlineKeyboardBuilder()

    for value_name, value_code in bag_type_params.get('values', []):
        builder.button(text=value_name, callback_data=f"bag_type_{value_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å—É–º–∫–∏:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("bag_type_"), StateFilter(ProductStates.waiting_for_bag_type))
async def process_bag_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å—É–º–∫–∏"""
    bag_type = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "bag_type_"

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    bag_params = get_bag_parameters()
    bag_type_params = bag_params.get('bag_type', {})
    selected_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    for value_name, value_code in bag_type_params.get('values', []):
        if value_code == bag_type:
            selected_name = value_name
            break

    await state.update_data(bag_type=bag_type, bag_type_name=selected_name)
    await state.set_state(ProductStates.waiting_for_bag_gender)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(f"{user_name}, –≤–∏–¥ —Å—É–º–∫–∏: {selected_name}")
    await ask_bag_gender(callback.message, user_name)


async def ask_bag_gender(message: Message, user_name: str = ""):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–≥–æ —Å—É–º–∫–∞"""
    bag_params = get_bag_parameters()
    gender_params = bag_params.get('bag_gender', {})

    builder = InlineKeyboardBuilder()

    for value_name, value_code in gender_params.get('values', []):
        builder.button(text=value_name, callback_data=f"bag_gender_{value_code}")

    builder.adjust(1)

    greeting = f"{user_name}, " if user_name else ""
    await message.answer(
        f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–æ–≥–æ —Å—É–º–∫–∞:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("bag_gender_"), StateFilter(ProductStates.waiting_for_bag_gender))
async def process_bag_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –∫–æ–≥–æ —Å—É–º–∫–∞"""
    bag_gender = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º "bag_gender_"

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    bag_params = get_bag_parameters()
    gender_params = bag_params.get('bag_gender', {})
    selected_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    for value_name, value_code in gender_params.get('values', []):
        if value_code == bag_gender:
            selected_name = value_name
            break

    await state.update_data(bag_gender=bag_gender, bag_gender_name=selected_name)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(f"{user_name}, –¥–ª—è –∫–æ–≥–æ: {selected_name}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (—Ä–∞–∑–º–µ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç.–¥.)
    data = await state.get_data()
    category_name = data.get('category_name', '')

    needs_size = any(size_cat in category_name for size_cat in SIZE_CATEGORIES)

    if needs_size:
        await state.set_state(ProductStates.waiting_for_size)
        await ask_size(callback.message, user_name)
    else:
        await state.set_state(ProductStates.waiting_for_condition)
        await ask_condition(callback.message, user_name)

async def process_brand_success(message: Message, state: FSMContext, user_name: str):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    brand = data.get('brand', '')
    category_name = data.get('category_name', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫ —Å—É–º–∫–∞–º
    if is_bag_category(category_name):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–º–∫–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        await state.set_state(ProductStates.waiting_for_bag_type)
        await ask_bag_type(message, user_name)
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await process_standard_parameters(message, state, user_name)


async def process_standard_parameters(message: Message, state: FSMContext, user_name: str):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    data = await state.get_data()
    category_name = data.get('category_name', '')

    needs_size = any(size_cat in category_name for size_cat in SIZE_CATEGORIES)

    if needs_size:
        await state.set_state(ProductStates.waiting_for_size)
        await ask_size(message, user_name)
    else:
        await state.set_state(ProductStates.waiting_for_condition)
        await ask_condition(message, user_name)

@router.callback_query(F.data.startswith("exact_brand_"), StateFilter(ProductStates.waiting_for_brand))
async def process_exact_brand(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö"""
    brand = callback.data[12:]  # –£–±–∏—Ä–∞–µ–º "exact_brand_"

    await state.update_data(brand=brand)
    await callback.message.edit_text(f"‚úÖ –ë—Ä–µ–Ω–¥ –≤—ã–±—Ä–∞–Ω: {brand}")
    await process_brand_success(callback.message, state, callback.from_user.first_name)
    await callback.answer()


@router.message(StateFilter(ProductStates.waiting_for_brand))
async def process_custom_brand(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±—Ä–µ–Ω–¥–∞"""
    brand = message.text.strip()
    if not brand:
        await message.answer("–ë—Ä–µ–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")
        return

    await state.update_data(brand=brand)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    category_name = data.get('category_name', '')

    needs_size = any(size_cat in category_name for size_cat in SIZE_CATEGORIES)

    user_name = message.from_user.first_name
    if needs_size:
        await state.set_state(ProductStates.waiting_for_size)
        await ask_size(message, user_name)
    else:
        await state.set_state(ProductStates.waiting_for_condition)
        await ask_condition(message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
@router.callback_query(F.data.startswith("size_"))
async def process_size(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    size_data = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º "size_"

    if size_data == "custom":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(ProductStates.waiting_for_size)
        return

    if size_data == "skip":
        await state.update_data(size="")
    else:
        await state.update_data(size=size_data)

    user_name = callback.from_user.first_name
    size_text = size_data if size_data != "skip" else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    await callback.message.edit_text(f"{user_name}, —Ä–∞–∑–º–µ—Ä: {size_text}")
    await state.set_state(ProductStates.waiting_for_condition)
    await ask_condition(callback.message, user_name)


@router.message(StateFilter(ProductStates.waiting_for_size))
async def process_custom_size(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    size = message.text.strip()
    await state.update_data(size=size)

    user_name = message.from_user.first_name
    await message.answer(f"{user_name}, —Ä–∞–∑–º–µ—Ä: {size}")
    await state.set_state(ProductStates.waiting_for_condition)
    await ask_condition(message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("condition_"))
async def process_condition(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    condition = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "condition_"

    condition_names = {
        "new_with_tag": "–Ω–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π",
        "excellent": "–æ—Ç–ª–∏—á–Ω–æ–µ",
        "good": "—Ö–æ—Ä–æ—à–µ–µ",
        "satisfactory": "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
    }

    await state.update_data(condition=condition)
    await state.set_state(ProductStates.waiting_for_sale_type)

    user_name = callback.from_user.first_name
    condition_text = condition_names.get(condition, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    await callback.message.edit_text(f"{user_name}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {condition_text}")
    await ask_sale_type(callback.message, user_name)


@router.callback_query(F.data.startswith("saletype_"))
async def process_sale_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    sale_type = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "saletype_"

    sale_type_names = {
        "resale": "—Ç–æ–≤–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É",
        "manufacturer": "—Ç–æ–≤–∞—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è",
        "personal": "–ø—Ä–æ–¥–∞—é —Å–≤–æ—ë"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞
    }

    await state.update_data(sale_type=sale_type)
    await state.set_state(ProductStates.waiting_for_placement_type)

    user_name = callback.from_user.first_name
    sale_text = sale_type_names.get(sale_type, "–Ω–µ —É–∫–∞–∑–∞–Ω")

    await callback.message.edit_text(f"{user_name}, —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_text}")
    await ask_placement_type(callback.message, user_name)


@router.callback_query(F.data.startswith("placement_"))
async def process_placement_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    placement_type = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "placement_"

    await state.update_data(placement_type=placement_type)

    user_name = callback.from_user.first_name

    if placement_type == "cities":
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
        await state.set_state(ProductStates.waiting_for_placement_method)
        placement_text = "–ø–æ –≥–æ—Ä–æ–¥–∞–º"

        builder = InlineKeyboardBuilder()
        placement_methods = [
            ("üìç –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", "exact_cities"),
            ("üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "by_quantity"),
            ("üè¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ", "multiple_in_city")
        ]

        for method_name, method_code in placement_methods:
            builder.button(text=method_name, callback_data=f"method_{method_code}")

        builder.adjust(1)

        await callback.message.edit_text(
            f"{user_name}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    elif placement_type == "metro":
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –º–µ—Ç—Ä–æ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞ –º–µ—Ç—Ä–æ
        await state.set_state(ProductStates.waiting_for_metro_city)
        placement_text = "–ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ"

        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        await state.update_data(placement_method="metro")

        await callback.message.edit_text(f"{user_name}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_text}")
        await ask_metro_city(callback.message, user_name)

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")


@router.callback_query(F.data.startswith("method_"))
async def process_placement_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    method = callback.data[7:]  # –£–±–∏—Ä–∞–µ–º "method_"

    # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–æ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    await state.update_data(placement_method=method)
    user_name = callback.from_user.first_name

    if method == "exact_cities":
        # –ü–æ—à—Ç—É—á–Ω—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤
        await state.set_state(ProductStates.waiting_for_city_input)
        await state.update_data(selected_cities=[])
        await callback.message.edit_text(f"{user_name}, –≤—ã–±—Ä–∞–Ω –≤–≤–æ–¥ —Ç–æ—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")
        await ask_city_input(callback.message, user_name)

    elif method == "by_quantity":
        # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑ XML
        await state.set_state(ProductStates.waiting_for_quantity)
        await callback.message.edit_text(f"{user_name}, –≤—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É.")
        await ask_quantity_from_xml(callback.message, user_name)

    elif method == "multiple_in_city":
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ
        await state.set_state(ProductStates.waiting_for_city_input)
        await state.update_data(
            selected_cities=[],
            placement_method="multiple_in_city"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º
        )
        await callback.message.edit_text(f"{user_name}, –≤—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è.")
        await ask_single_city_for_multiple(callback.message, user_name)

    elif method == "metro":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ—Ç—Ä–æ
        await state.set_state(ProductStates.waiting_for_metro_city)
        await callback.message.edit_text(f"{user_name}, –≤—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ.")
        await ask_metro_city(callback.message, user_name)

    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        await complete_product_creation(callback.message, state, user_name)

@router.message(StateFilter(ProductStates.waiting_for_cities))
async def process_cities(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    cities_text = message.text.strip()
    if not cities_text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤:")
        return

    cities = [city.strip() for city in cities_text.split(',')]
    await state.update_data(cities=cities)

    user_name = message.from_user.first_name
    await message.answer(f"{user_name}, –≥–æ—Ä–æ–¥–∞: {', '.join(cities)}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –≤–º–µ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await state.set_state(ProductStates.waiting_for_start_date)
    await ask_start_date(message, user_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback'–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@router.callback_query(CalendarCallback.filter())
async def handle_calendar_callback(
        callback: CallbackQuery,
        callback_data: CalendarCallback,
        state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback'–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    current_state = await state.get_state()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if current_state != ProductStates.waiting_for_start_date:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã")
        return

    calendar = ProductCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)

    if selected:
        user_name = callback.from_user.first_name

        if date is None:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            await state.update_data(start_date=None, start_time=None)
            await callback.message.answer(f"{user_name}, –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            await complete_product_creation(callback.message, state, user_name)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            await state.update_data(start_date=date)
            await state.set_state(ProductStates.waiting_for_start_time)

            builder = InlineKeyboardBuilder()
            popular_times = [
                "09:00", "10:00", "11:00", "12:00",
                "13:00", "14:00", "15:00", "16:00",
                "17:00", "18:00", "19:00", "20:00"
            ]

            for time in popular_times:
                builder.button(text=time, callback_data=f"time_{time}")

            builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="time_custom")
            builder.adjust(3)

            await callback.message.answer(
                f"{user_name}, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏: {date.strftime('%d.%m.%Y')}\n\n"
                "‚è∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏:",
                reply_markup=builder.as_markup()
            )


# –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.callback_query(F.data.startswith("contact_"))
async def process_contact_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
    contact_method = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "contact_"

    contact_methods = {
        "both": "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
        "phone": "–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        "message": "–í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
    }

    method_name = contact_methods.get(contact_method, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(contact_method=contact_method)

    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"{user_name}, —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {method_name}\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )

    await state.set_state(ProductStates.waiting_for_phone)
    await ask_phone_number(callback.message, user_name)

@router.callback_query(F.data.startswith("time_"), StateFilter(ProductStates.waiting_for_start_time))
async def process_time_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
    time_data = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º "time_"

    if time_data == "custom":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    if not is_valid_time_format(time_data):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        return

    await process_time_input(callback.message, time_data, state, callback.from_user.first_name)


@router.message(StateFilter(ProductStates.waiting_for_start_time))
async def process_time_input_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time_input = message.text.strip()

    if not is_valid_time_format(time_input):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
        )
        return

    await process_time_input(message, time_input, state, message.from_user.first_name)


async def process_time_input(message: Message, time_str: str, state: FSMContext, user_name: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    start_date = data.get('start_date')

    if not start_date:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    time_parts = time_str.split(':')
    hour = int(time_parts[0])
    minute = int(time_parts[1])

    full_datetime = start_date.replace(hour=hour, minute=minute, second=0, microsecond=0)

    await state.update_data(
        start_time=time_str,
        start_datetime=full_datetime
    )

    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}\n"
        f"üìÖ –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {full_datetime.strftime('%d.%m.%Y %H:%M')}"
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await complete_product_creation(message, state, user_name)


def is_valid_time_format(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        if not time_str or ':' not in time_str:
            return False

        parts = time_str.split(':')
        if len(parts) != 2:
            return False

        hour = int(parts[0])
        minute = int(parts[1])

        return 0 <= hour <= 23 and 0 <= minute <= 59

    except (ValueError, IndexError):
        return False