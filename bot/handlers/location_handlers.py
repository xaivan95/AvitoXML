# bot/handlers/location_handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.states import ProductStates
from bot.handlers.base import BaseHandler, StateManager
from bot.services.location_service import LocationService
from bot.services.metro_service import MetroService
from bot.keyboards.builders import KeyboardBuilder


class LocationHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞—Ü–∏—è–º–∏"""

    def _register_handlers(self):
        # –ú–µ—Ç—Ä–æ
        self.router.callback_query.register(
            self.process_metro_city,
            F.data.startswith("metro_city_"),
            StateFilter(ProductStates.waiting_for_metro_city)
        )
        self.router.message.register(
            self.process_metro_quantity,
            StateFilter(ProductStates.waiting_for_metro_quantity)
        )
        self.router.callback_query.register(
            self.back_to_placement_type,
            F.data == "back_to_placement_type",
            StateFilter(ProductStates.waiting_for_metro_city)
        )
        self.router.callback_query.register(
            self.back_to_metro_city,
            F.data == "back_to_metro_city",
            StateFilter(ProductStates.waiting_for_metro_quantity)
        )

        # –ì–æ—Ä–æ–¥–∞
        self.router.message.register(
            self.handle_city_input,
            StateFilter(ProductStates.waiting_for_city_input)
        )
        self.router.message.register(
            self.process_single_city_input,
            StateFilter(ProductStates.waiting_for_city_input)
        )
        self.router.callback_query.register(
            self.confirm_city,
            F.data == "city_confirm",
            StateFilter(ProductStates.waiting_for_city_confirmation)
        )
        self.router.callback_query.register(
            self.reject_city,
            F.data == "city_reject",
            StateFilter(ProductStates.waiting_for_city_confirmation)
        )
        self.router.callback_query.register(
            self.restart_city_input,
            F.data == "cities_restart",
            StateFilter(ProductStates.waiting_for_city_input)
        )
        self.router.callback_query.register(
            self.skip_city_input,
            F.data == "cities_skip",
            StateFilter(ProductStates.waiting_for_city_input)
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        self.router.message.register(
            self.handle_quantity_input,
            StateFilter(ProductStates.waiting_for_quantity)
        )

        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message.register(
            self.show_cities_status,
            Command("cities_status"),
            StateFilter(ProductStates.waiting_for_city_input)
        )

    async def process_metro_city(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å –º–µ—Ç—Ä–æ"""
        city_name = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º "metro_city_"

        stations = MetroService.get_metro_stations(city_name)
        if not stations:
            await callback.answer("‚ùå –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö –º–µ—Ç—Ä–æ", show_alert=True)
            await MetroService.ask_metro_city(callback.message, callback.from_user.first_name)
            return

        await StateManager.safe_update(
            state,
            metro_city=city_name,
            metro_stations=stations,
            cities=[city_name],
            placement_method="metro"
        )
        await state.set_state(ProductStates.waiting_for_metro_quantity)

        user_name = callback.from_user.first_name
        sample_stations = ", ".join(stations[:5])

        await callback.message.edit_text(
            f"{user_name}, –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: üöá {city_name}\n\n"
            f"üìç –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π: {sample_stations}...\n"
            f"üìä –í—Å–µ–≥–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(stations)}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:"
        )

    async def process_metro_quantity(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–µ—Ç—Ä–æ"""
        try:
            quantity = int(message.text.strip())

            if quantity <= 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
                return

            if quantity > 100:
                await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:")
                return

            data = await StateManager.get_data_safe(state)
            city_name = data.get('metro_city')
            all_stations = data.get('metro_stations', [])

            selected_stations = MetroService.get_random_stations(city_name, quantity)

            await StateManager.safe_update(
                state,
                quantity=quantity,
                selected_metro_stations=selected_stations,
                placement_method="metro"
            )

            user_name = message.from_user.first_name
            sample_display = ", ".join(selected_stations[:3])
            if len(selected_stations) > 3:
                sample_display += f" –∏ –µ—â—ë {len(selected_stations) - 3}"

            await message.answer(
                f"{user_name}, ‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –º–µ—Ç—Ä–æ!\n\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city_name}\n"
                f"üöá –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(set(selected_stations))}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {quantity}\n"
                f"üìç –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π: {sample_display}\n\n"
                "üè† –ö–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç –∞–¥—Ä–µ—Å —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π –º–µ—Ç—Ä–æ"
            )

            await state.set_state(ProductStates.waiting_for_start_date)
            from bot.services.product_service import ProductService
            await ProductService.ask_start_date(message, user_name)

        except ValueError:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    async def back_to_placement_type(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        user_name = callback.from_user.first_name
        await state.set_state(ProductStates.waiting_for_placement_type)
        await callback.message.edit_text(f"{user_name}, –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.")

        from bot.services.product_service import ProductService
        await ProductService.ask_placement_type(callback.message, user_name)

    async def back_to_metro_city(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞ –º–µ—Ç—Ä–æ"""
        user_name = callback.from_user.first_name
        await state.set_state(ProductStates.waiting_for_metro_city)
        await callback.message.edit_text(f"{user_name}, –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞.")
        await MetroService.ask_metro_city(callback.message, user_name)

    async def handle_city_input(self, message: Message, state: FSMContext):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
        data = await StateManager.get_data_safe(state)
        placement_method = data.get('placement_method')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤":
            await self._finish_city_input(message, state)
            return

        if placement_method == "multiple_in_city":
            await self._process_single_city_for_multiple(message, state)
        else:
            await self._process_city_input(message, state)

    async def _process_single_city_for_multiple(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        city_name = message.text.strip()

        if not city_name:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
            return

        # –ò—â–µ–º –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ Nominatim
        from –Ω—Ñ import validate_city_nominatim
        result = await validate_city_nominatim(city_name)

        if result['valid']:
            city_data = result['data']

            selected_cities = [{
                'name': city_data['name'],
                'full_address': city_data['full_address'],
                'lat': city_data.get('lat'),
                'lon': city_data.get('lon'),
                'type': city_data.get('type')
            }]

            await StateManager.safe_update(
                state,
                selected_cities=selected_cities,
                cities=[city_data['name']]
            )
            await state.set_state(ProductStates.waiting_for_quantity)

            await message.answer(
                f"‚úÖ –ì–æ—Ä–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                f"üèôÔ∏è {city_data['name']}\n"
                f"üìç {city_data['full_address']}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )

    async def _process_city_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
        city_name = message.text.strip()

        if not city_name:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
            return

        # –ò—â–µ–º –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ Nominatim
        from –Ω—Ñ import validate_city_nominatim
        result = await validate_city_nominatim(city_name)

        if result['valid']:
            city_data = result['data']
            await StateManager.safe_update(state, temp_city=city_data)

            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data="city_confirm")
            builder.button(text="‚ùå –ù–µ—Ç, –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_reject")
            builder.adjust(2)

            await message.answer(
                f"üîç –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥:\n"
                f"üèôÔ∏è {city_data['name']}\n"
                f"üìç {city_data['full_address']}\n\n"
                "–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥?",
                reply_markup=builder.as_markup()
            )

            await state.set_state(ProductStates.waiting_for_city_confirmation)
        else:
            await message.answer(
                f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )

    async def process_single_city_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        await self._process_city_input(message, state)

    async def confirm_city(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
        data = await StateManager.get_data_safe(state)
        city_data = data.get('temp_city')
        selected_cities = data.get('selected_cities', [])

        selected_cities.append({
            'name': city_data['name'],
            'full_address': city_data['full_address'],
            'lat': city_data.get('lat'),
            'lon': city_data.get('lon'),
            'type': city_data.get('type')
        })

        await StateManager.safe_update(state, selected_cities=selected_cities)
        await state.set_state(ProductStates.waiting_for_city_input)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await callback.message.edit_text(
            f"‚úÖ –ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üèôÔ∏è {city_data['name']}\n"
            f"üìç {city_data['full_address']}\n\n"
            f"üìä –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {len(selected_cities)}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥:"
        )

        await callback.message.answer(
            "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤:",
            reply_markup=keyboard
        )

    async def reject_city(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
        await state.set_state(ProductStates.waiting_for_city_input)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:")

    async def restart_city_input(self, callback: CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
        await StateManager.safe_update(state, selected_cities=[])
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        await callback.answer()

    async def skip_city_input(self, callback: CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
        await StateManager.safe_update(state, cities=[])
        await state.set_state(ProductStates.waiting_for_start_date)

        user_name = callback.from_user.first_name
        await callback.message.edit_text(f"{user_name}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≥–æ—Ä–æ–¥–∞–º.")

        from bot.services.product_service import ProductService
        await ProductService.ask_start_date(callback.message, user_name)

    async def _finish_city_input(self, message: Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
        data = await StateManager.get_data_safe(state)
        selected_cities = data.get('selected_cities', [])

        if not selected_cities:
            builder = InlineKeyboardBuilder()
            builder.button(text="üîÑ –ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤", callback_data="cities_restart")
            builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –≥–æ—Ä–æ–¥–æ–≤", callback_data="cities_skip")
            builder.adjust(1)

            await message.answer(
                "‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=builder.as_markup()
            )
            return

        city_names = [city['name'] for city in selected_cities]
        await StateManager.safe_update(state, cities=city_names)
        await state.set_state(ProductStates.waiting_for_start_date)

        user_name = message.from_user.first_name
        cities_list = ", ".join(city_names)

        await message.answer(
            f"{user_name}, ‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤!\n"
            f"üèôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(selected_cities)}\n"
            f"üìç –°–ø–∏—Å–æ–∫: {cities_list}",
            reply_markup=ReplyKeyboardRemove()
        )

        from bot.services.product_service import ProductService
        await ProductService.ask_start_date(message, user_name)

    async def handle_quantity_input(self, message: Message, state: FSMContext):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        data = await StateManager.get_data_safe(state)
        placement_method = data.get('placement_method')

        if placement_method == "multiple_in_city":
            await self._process_quantity_for_multiple(message, state)
        elif placement_method == "by_quantity":
            await self._process_quantity_from_xml(message, state)
        elif placement_method == "metro":
            await self.process_metro_quantity(message, state)
        else:
            await self._process_general_quantity(message, state)

    async def _process_quantity_for_multiple(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            quantity = int(message.text.strip())

            if quantity <= 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
                return

            if quantity > 100:
                await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:")
                return

            data = await StateManager.get_data_safe(state)
            selected_cities = data.get('selected_cities', [])

            if not selected_cities:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.")
                return

            city_data = selected_cities[0]

            await StateManager.safe_update(
                state,
                quantity=quantity,
                cities=[city_data['name']],
                selected_cities=selected_cities
            )

            user_name = message.from_user.first_name
            await message.answer(
                f"{user_name}, ‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city_data['name']}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {quantity}\n"
                f"üìç –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {quantity} —Ä–∞–∑–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"
            )

            await state.set_state(ProductStates.waiting_for_start_date)
            from bot.services.product_service import ProductService
            await ProductService.ask_start_date(message, user_name)

        except ValueError:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    async def _process_quantity_from_xml(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ –∏–∑ XML"""
        try:
            quantity = int(message.text.strip())
            cities = LocationService.load_cities_from_xml()

            if quantity <= 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
                return

            if quantity > len(cities):
                await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(cities)}. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:")
                return

            selected_cities = [city['name'] for city in cities[:quantity]]

            await StateManager.safe_update(
                state,
                cities=selected_cities,
                quantity=quantity
            )

            user_name = message.from_user.first_name
            cities_list = ", ".join(selected_cities)

            await message.answer(
                f"{user_name}, ‚úÖ –≤—ã–±—Ä–∞–Ω–æ {quantity} –≥–æ—Ä–æ–¥–æ–≤:\n{cities_list}"
            )

            await state.set_state(ProductStates.waiting_for_start_date)
            from bot.services.product_service import ProductService
            await ProductService.ask_start_date(message, user_name)

        except ValueError:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    async def _process_general_quantity(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–±—â–µ–≥–æ —Å–ª—É—á–∞—è"""
        try:
            quantity = int(message.text.strip())

            if quantity <= 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
                return

            await StateManager.safe_update(state, quantity=quantity)

            user_name = message.from_user.first_name
            await message.answer(f"{user_name}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {quantity}")

            await state.set_state(ProductStates.waiting_for_start_date)
            from bot.services.product_service import ProductService
            await ProductService.ask_start_date(message, user_name)

        except ValueError:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

    async def show_cities_status(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤"""
        data = await StateManager.get_data_safe(state)
        selected_cities = data.get('selected_cities', [])

        if not selected_cities:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
            return

        cities_text = "üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n\n"
        for i, city in enumerate(selected_cities, 1):
            cities_text += f"{i}. {city['name']}\n"
            cities_text += f"   üìç {city['full_address']}\n\n"

        cities_text += f"üìä –í—Å–µ–≥–æ: {len(selected_cities)} –≥–æ—Ä–æ–¥–æ–≤"
        await message.answer(cities_text)