import calendar
from datetime import datetime, timedelta
from typing import Tuple, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.callback_data import CallbackData


class CalendarCallback(CallbackData, prefix="calendar"):
    action: str
    year: int
    month: int
    day: int


class ProductCalendar:
    months = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]

    def __init__(self):
        self.now = datetime.now()
        self.today = datetime.now().date()

    async def start_calendar(self) -> InlineKeyboardMarkup:
        """–ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è - –≤—ã–±–æ—Ä –≥–æ–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ)"""
        current_year = self.now.year

        inline_kb = InlineKeyboardMarkup(inline_keyboard=[])

        # –°—Ç—Ä–æ–∫–∞ —Å –≥–æ–¥–∞–º–∏ (–Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ)
        years_row = []
        for value in range(current_year, current_year + 5):
            years_row.append(InlineKeyboardButton(
                text=str(value),
                callback_data=CalendarCallback(
                    action="SET_YEAR",
                    year=value,
                    month=0,
                    day=0
                ).pack()
            ))
        inline_kb.inline_keyboard.append(years_row)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º
        nav_row = [
            InlineKeyboardButton(
                text='<<',
                callback_data=CalendarCallback(
                    action="PREV_YEARS",
                    year=current_year,
                    month=0,
                    day=0
                ).pack()
            ),
            InlineKeyboardButton(
                text='>>',
                callback_data=CalendarCallback(
                    action="NEXT_YEARS",
                    year=current_year,
                    month=0,
                    day=0
                ).pack()
            )
        ]
        inline_kb.inline_keyboard.append(nav_row)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        skip_button = InlineKeyboardButton(
            text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–Ω–∞—á–∞—Ç—å —Å—Ä–∞–∑—É)",
            callback_data=CalendarCallback(
                action="SKIP",
                year=0,
                month=0,
                day=0
            ).pack()
        )
        inline_kb.inline_keyboard.append([skip_button])

        return inline_kb

    async def _get_month_kb(self, year: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –±—É–¥—É—â–∏–µ –≥–æ–¥–∞"""
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[])

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥–æ–¥–æ–º
        header_row = [
            InlineKeyboardButton(
                text=str(year),
                callback_data=CalendarCallback(
                    action="START",
                    year=year,
                    month=0,
                    day=0
                ).pack()
            )
        ]
        inline_kb.inline_keyboard.append(header_row)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã
        current_year = self.now.year
        current_month = self.now.month

        # –ü–µ—Ä–≤—ã–µ 6 –º–µ—Å—è—Ü–µ–≤
        months_row1 = []
        for i, month in enumerate(self.months[0:6], 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –ª–∏ –º–µ—Å—è—Ü
            if year > current_year or (year == current_year and i >= current_month):
                months_row1.append(InlineKeyboardButton(
                    text=month,
                    callback_data=CalendarCallback(
                        action="SET_MONTH",
                        year=year,
                        month=i,
                        day=0
                    ).pack()
                ))
            else:
                months_row1.append(InlineKeyboardButton(
                    text="‚ùå",
                    callback_data=CalendarCallback(
                        action="IGNORE",
                        year=0,
                        month=0,
                        day=0
                    ).pack()
                ))
        inline_kb.inline_keyboard.append(months_row1)

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        months_row2 = []
        for i, month in enumerate(self.months[6:12], 7):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –ª–∏ –º–µ—Å—è—Ü
            if year > current_year or (year == current_year and i >= current_month):
                months_row2.append(InlineKeyboardButton(
                    text=month,
                    callback_data=CalendarCallback(
                        action="SET_MONTH",
                        year=year,
                        month=i,
                        day=0
                    ).pack()
                ))
            else:
                months_row2.append(InlineKeyboardButton(
                    text="‚ùå",
                    callback_data=CalendarCallback(
                        action="IGNORE",
                        year=0,
                        month=0,
                        day=0
                    ).pack()
                ))
        inline_kb.inline_keyboard.append(months_row2)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = [
            InlineKeyboardButton(
                text='üîô –ù–∞–∑–∞–¥',
                callback_data=CalendarCallback(
                    action="BACK",
                    year=year,
                    month=0,
                    day=0
                ).pack()
            )
        ]
        inline_kb.inline_keyboard.append(nav_row)

        return inline_kb

    async def _get_days_kb(self, year: int, month: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã"""
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[])

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥–æ–¥–æ–º –∏ –º–µ—Å—è—Ü–µ–º
        header_row = [
            InlineKeyboardButton(
                text=f"{self.months[month - 1]} {year}",
                callback_data=CalendarCallback(
                    action="SET_YEAR",
                    year=year,
                    month=0,
                    day=0
                ).pack()
            )
        ]
        inline_kb.inline_keyboard.append(header_row)

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        week_days_row = []
        for day in week_days:
            week_days_row.append(InlineKeyboardButton(
                text=day,
                callback_data=CalendarCallback(
                    action="IGNORE",
                    year=0,
                    month=0,
                    day=0
                ).pack()
            ))
        inline_kb.inline_keyboard.append(week_days_row)

        # –î–Ω–∏ –º–µ—Å—è—Ü–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        month_calendar = calendar.monthcalendar(year, month)
        today = self.today

        for week in month_calendar:
            week_row = []
            for day in week:
                if day == 0:
                    week_row.append(InlineKeyboardButton(
                        text=" ",
                        callback_data=CalendarCallback(
                            action="IGNORE",
                            year=0,
                            month=0,
                            day=0
                        ).pack()
                    ))
                else:
                    current_date = datetime(year, month, day).date()
                    if current_date >= today:
                        # –î–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞
                        week_row.append(InlineKeyboardButton(
                            text=str(day),
                            callback_data=CalendarCallback(
                                action="SET_DAY",
                                year=year,
                                month=month,
                                day=day
                            ).pack()
                        ))
                    else:
                        # –ü—Ä–æ—à–µ–¥—à–∞—è –¥–∞—Ç–∞
                        week_row.append(InlineKeyboardButton(
                            text="‚ùå",
                            callback_data=CalendarCallback(
                                action="IGNORE",
                                year=0,
                                month=0,
                                day=0
                            ).pack()
                        ))
            inline_kb.inline_keyboard.append(week_row)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = [
            InlineKeyboardButton(
                text='üîô –ù–∞–∑–∞–¥',
                callback_data=CalendarCallback(
                    action="BACK",
                    year=year,
                    month=month,
                    day=0
                ).pack()
            )
        ]
        inline_kb.inline_keyboard.append(nav_row)

        return inline_kb

    async def process_selection(self, callback: CallbackQuery, data: CalendarCallback) -> Tuple[
        bool, Optional[datetime]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        try:
            if data.action == "IGNORE":
                await callback.answer("–≠—Ç–∞ –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                return False, None

            if data.action == "SKIP":
                await callback.message.delete()
                return True, None

            if data.action == "SET_YEAR":
                markup = await self._get_month_kb(data.year)
                await callback.message.edit_reply_markup(reply_markup=markup)
                return False, None

            if data.action == "PREV_YEARS":
                new_year = max(self.now.year, data.year - 5)  # –ù–µ —É—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—à–ª–æ–µ
                markup = await self.start_calendar()
                await callback.message.edit_reply_markup(reply_markup=markup)
                return False, None

            if data.action == "NEXT_YEARS":
                new_year = data.year + 5
                markup = await self.start_calendar()
                await callback.message.edit_reply_markup(reply_markup=markup)
                return False, None

            if data.action == "START":
                markup = await self.start_calendar()
                await callback.message.edit_reply_markup(reply_markup=markup)
                return False, None

            if data.action == "SET_MONTH":
                markup = await self._get_days_kb(data.year, data.month)
                await callback.message.edit_reply_markup(reply_markup=markup)
                return False, None

            if data.action == "SET_DAY":
                selected_date = datetime(data.year, data.month, data.day)
                await callback.message.delete()
                return True, selected_date

            if data.action == "BACK":
                # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
                markup = await self.start_calendar()
                await callback.message.edit_reply_markup(reply_markup=markup)
                return False, None

        except Exception as e:
            print(f"Calendar processing error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

        return False, None