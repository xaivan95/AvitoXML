# bot/services/delivery_service.py
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder


class DeliveryService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"""

    DELIVERY_SERVICES = [
        ("–í—ã–∫–ª—é—á–µ–Ω–∞", "disabled"),
        ("–ü–í–ó", "pickup"),
        ("–ö—É—Ä—å–µ—Ä", "courier"),
        ("–ü–æ—Å—Ç–∞–º–∞—Ç", "postamat"),
        ("–°–≤–æ–π –∫—É—Ä—å–µ—Ä", "own_courier"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö", "sdek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –î–µ–ª–æ–≤—ã–µ –õ–∏–Ω–∏–∏", "business_lines"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä DPD", "dpd"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–≠–ö", "pek"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", "russian_post"),
        ("–°–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–î–≠–ö –∫—É—Ä—å–µ—Ä", "sdek_courier"),
        ("–°–∞–º–æ–≤—ã–≤–æ–∑ —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π", "self_pickup_online")
    ]

    @staticmethod
    async def ask_avito_delivery(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        builder = InlineKeyboardBuilder()

        builder.button(text="‚úÖ –î–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="delivery_yes")
        builder.button(text="‚ùå –ù–µ—Ç, –Ω–µ –Ω—É–∂–Ω–æ", callback_data="delivery_no")
        builder.adjust(1)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫—É?",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_delivery_services(message: Message, state: FSMContext, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
        from bot.handlers.base import StateManager

        data = await StateManager.get_data_safe(state)
        selected_services = data.get('delivery_services', [])

        builder = InlineKeyboardBuilder()

        for service_name, service_code in DeliveryService.DELIVERY_SERVICES:
            if service_code in selected_services:
                builder.button(text=f"‚úÖ {service_name}", callback_data=f"service_{service_code}")
            else:
                builder.button(text=service_name, callback_data=f"service_{service_code}")

        builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="service_done")
        builder.adjust(1)

        selected_text = ", ".join([
            name for name, code in DeliveryService.DELIVERY_SERVICES
            if code in selected_services
        ])

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
            f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {selected_text or '–Ω–∏—á–µ–≥–æ'}\n\n"
            "üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def update_delivery_services_keyboard(message: Message, state: FSMContext, user_name: str = ""):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ª—É–∂–± –¥–æ—Å—Ç–∞–≤–∫–∏"""
        from bot.handlers.base import StateManager

        data = await StateManager.get_data_safe(state)
        selected_services = data.get('delivery_services', [])

        builder = InlineKeyboardBuilder()

        for service_name, service_code in DeliveryService.DELIVERY_SERVICES:
            if service_code in selected_services:
                builder.button(text=f"‚úÖ {service_name}", callback_data=f"service_{service_code}")
            else:
                builder.button(text=service_name, callback_data=f"service_{service_code}")

        builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="service_done")
        builder.adjust(1)

        selected_text = ", ".join([
            name for name, code in DeliveryService.DELIVERY_SERVICES
            if code in selected_services
        ])

        greeting = f"{user_name}, " if user_name else ""
        await message.edit_text(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"
            f"üì¶ –í—ã–±—Ä–∞–Ω–æ: {selected_text or '–Ω–∏—á–µ–≥–æ'}\n\n"
            "üí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_delivery_discount(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
        builder = InlineKeyboardBuilder()

        builder.button(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="discount_free")
        builder.button(text="üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="discount_discount")
        builder.button(text="üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏", callback_data="discount_none")

        builder.adjust(1)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É?\n\n"
            "–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ 500 —Ä—É–±–ª–µ–π –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
            "‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
            "‚Ä¢ üí∞ –°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
            "‚Ä¢ üö´ –ù–µ—Ç —Å–∫–∏–¥–∫–∏",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_multioffer(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –æ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        builder = InlineKeyboardBuilder()

        builder.button(text="‚úÖ –î–∞", callback_data="multioffer_yes")
        builder.button(text="‚ùå –ù–µ—Ç", callback_data="multioffer_no")

        builder.adjust(2)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º?",
            reply_markup=builder.as_markup()
        )