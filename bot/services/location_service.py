# bot/services/location_service.py
from typing import List, Dict, Optional
import xml.etree.ElementTree as ET
import random

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message

from .metro_data import generate_metro_address


class LocationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞—Ü–∏—è–º–∏"""

    @staticmethod
    def load_cities_from_xml() -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ XML"""
        try:
            tree = ET.parse('cities.xml')
            root = tree.getroot()

            cities = []
            for city_elem in root.findall('city'):
                try:
                    name_elem = city_elem.find('name')
                    population_elem = city_elem.find('population')
                    region_elem = city_elem.find('region')

                    if name_elem is not None and name_elem.text:
                        city_data = {
                            'name': name_elem.text.strip(),
                            'population': int(population_elem.text) if population_elem.text else 0,
                            'region': region_elem.text if region_elem else ''
                        }
                        cities.append(city_data)
                except (ValueError, AttributeError):
                    continue

            cities.sort(key=lambda x: x['population'], reverse=True)
            return cities

        except Exception as e:
            print(f"Error loading cities XML: {e}")
            return LocationService._get_default_cities()

    @staticmethod
    def _get_default_cities() -> List[Dict]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"""
        return [
            {'name': '–ú–æ—Å–∫–≤–∞', 'population': 12678079, 'region': '–ú–æ—Å–∫–≤–∞'},
            {'name': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'population': 5398064, 'region': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'},
            {'name': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 'population': 1625631, 'region': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'},
        ]

    @staticmethod
    def get_cities_with_metro() -> List[Dict]:
        """–ì–æ—Ä–æ–¥–∞ —Å –º–µ—Ç—Ä–æ"""
        metro_cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
                        '–°–∞–º–∞—Ä–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å']

        all_cities = LocationService.load_cities_from_xml()
        return [city for city in all_cities if city['name'] in metro_cities]

    @staticmethod
    def generate_address(city: str, ad_number: int = 1, metro_station: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞"""
        if metro_station:
            return generate_metro_address(city, metro_station, ad_number)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        streets = [
            "—É–ª. –õ–µ–Ω–∏–Ω–∞", "—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è", "—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è", "—É–ª. –ú–∏—Ä–∞",
            "–ø—Ä. –ü–æ–±–µ–¥—ã", "–ø—Ä. –ú–∏—Ä–∞", "–±—É–ª—å–≤–∞—Ä –°–≤–æ–±–æ–¥—ã"
        ]
        street = random.choice(streets)
        building = random.randint(1, 100)

        if ad_number > 1:
            return f"{city}, {street}, –¥. {building}, –∫–≤. {ad_number}"
        return f"{city}, {street}, –¥. {building}"

    @staticmethod
    async def ask_city_input(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É"""
        greeting = f"{user_name}, " if user_name else ""

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:\n\n"
            "üèôÔ∏è –ì–æ—Ä–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "üìù –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É\n"
            "‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å",
            reply_markup=keyboard
        )

    @staticmethod
    async def ask_quantity_from_xml(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–µ—Ç–æ–¥–∞ –∏–∑ XML"""
        cities = LocationService.load_cities_from_xml()
        total_cities = len(cities)

        sample_cities = ", ".join([city['name'] for city in cities[:5]])

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º {total_cities}):\n\n"
            f"üèôÔ∏è –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {total_cities}\n"
            f"üìç –ü—Ä–∏–º–µ—Ä: {sample_cities}...\n"
            f"üéØ –ë—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º"
        )

    @staticmethod
    async def ask_city_selection(message: Message, user_name: str = "", search_query: str = ""):
        """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        greeting = f"{user_name}, " if user_name else ""

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        found_cities = await LocationService.search_cities(search_query)

        if not found_cities:
            await message.answer(
                f"{greeting}–≥–æ—Ä–æ–¥ '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            return

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        for city in found_cities[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            keyboard.add(KeyboardButton(text=f"üìç {city['name']}"))
        keyboard.add(KeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"))

        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}\n"
            f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(found_cities)}",
            reply_markup=keyboard
        )

    @staticmethod
    async def ask_region_selection(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤"""
        regions = LocationService.get_available_regions()

        greeting = f"{user_name}, " if user_name else ""

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = []
        for region in regions[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 8 —Ä–µ–≥–∏–æ–Ω–∞–º–∏
            buttons.append(KeyboardButton(text=region))
        keyboard.add(*buttons)
        keyboard.add(KeyboardButton(text="üåç –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã"))

        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:\n\n"
            f"üó∫Ô∏è –í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(regions)}\n"
            f"üìç –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≤—Å–µ —Å—Ä–∞–∑—É",
            reply_markup=keyboard
        )

    @staticmethod
    async def confirm_city_addition(message: Message, user_name: str = "", city_data: dict = None):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
        if not city_data:
            return

        greeting = f"{user_name}, " if user_name else ""

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
                [KeyboardButton(text="üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")]
            ],
            resize_keyboard=True
        )

        city_info = f"üìç {city_data['name']}"
        if 'region' in city_data:
            city_info += f", {city_data['region']}"
        if 'population' in city_data:
            city_info += f"\nüë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {city_data['population']:,}"

        await message.answer(
            f"{greeting}–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:\n\n"
            f"{city_info}\n\n"
            f"‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –≤ —Å–ø–∏—Å–æ–∫\n"
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n"
            f"üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
            reply_markup=keyboard
        )

    @staticmethod
    async def show_city_summary(message: Message, user_name: str = "", selected_cities: list = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
        if not selected_cities:
            selected_cities = []

        greeting = f"{user_name}, " if user_name else ""

        cities_list = "\n".join([f"üìç {city['name']}" for city in selected_cities[:10]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        if len(selected_cities) > 10:
            cities_list += f"\n... –∏ –µ—â—ë {len(selected_cities) - 10} –≥–æ—Ä–æ–¥–æ–≤"

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"), KeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≥–æ—Ä–æ–¥–∞")],
                [KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            f"{greeting}–∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:\n\n"
            f"{cities_list}\n\n"
            f"üìä –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {len(selected_cities)}\n\n"
            f"‚úÖ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å —ç—Ç–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏\n"
            f"‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≥–æ—Ä–æ–¥–∞\n"
            f"üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
            f"üìù –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ",
            reply_markup=keyboard
        )

    @staticmethod
    async def search_cities(query: str) -> list:
        """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        cities = LocationService.load_cities_from_xml()
        return [city for city in cities if query.lower() in city['name'].lower()]

    @staticmethod
    def get_available_regions() -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        cities = LocationService.load_cities_from_xml()
        regions = list(set(city['region'] for city in cities if 'region' in city))
        return sorted(regions)

    @staticmethod
    async def ask_single_city_for_multiple(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        greeting = f"{user_name}, " if user_name else ""

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n\n"
            "üèôÔ∏è –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
            "üîç –ì–æ—Ä–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω\n"
            "‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥",
            reply_markup=keyboard
        )

    @staticmethod
    async def ask_city_input(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É"""
        greeting = f"{user_name}, " if user_name else ""

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–æ–≤")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:\n\n"
            "üèôÔ∏è –ì–æ—Ä–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "üìù –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ –æ–¥–Ω–æ–º—É\n"
            "‚úÖ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å",
            reply_markup=keyboard
        )

    @staticmethod
    async def ask_quantity_from_xml(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–µ—Ç–æ–¥–∞ –∏–∑ XML"""
        cities = LocationService.load_cities_from_xml()
        total_cities = len(cities)

        sample_cities = ", ".join([city['name'] for city in cities[:5]])

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º {total_cities}):\n\n"
            f"üèôÔ∏è –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {total_cities}\n"
            f"üìç –ü—Ä–∏–º–µ—Ä: {sample_cities}...\n"
            f"üéØ –ë—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º"
        )