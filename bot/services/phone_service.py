import re

from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.calendar import ProductCalendar

class PhoneService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏"""

    @staticmethod
    def normalize_phone(phone: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
        cleaned = re.sub(r'[^\d+]', '', phone)

        if cleaned.startswith('8') and len(cleaned) == 11:
            cleaned = '+7' + cleaned[1:]
        elif cleaned.startswith('7') and len(cleaned) == 11:
            cleaned = '+' + cleaned
        elif len(cleaned) == 10:
            cleaned = '+7' + cleaned
        elif cleaned.startswith('+7') and len(cleaned) == 12:
            pass  # –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

        return cleaned

    @staticmethod
    def is_valid_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
        normalized = PhoneService.normalize_phone(phone)

        if re.match(r'^(\+7|7|8)\d{10}$', normalized.replace('+', '').replace(' ', '')):
            return True

        patterns = [
            r'^\+7\s?\(\d{3}\)\s?\d{3}-\d{2}-\d{2}$',
            r'^8\s?\(\d{3}\)\s?\d{3}-\d{2}-\d{2}$',
            r'^8\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$',
            r'^\+7\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$',
        ]

        cleaned_phone = re.sub(r'[^\d]', '', phone)
        if len(cleaned_phone) in [10, 11]:
            return True

        for pattern in patterns:
            if re.match(pattern, phone.strip()):
                return True

        return False

    @staticmethod
    async def show_contact_methods(message: Message, user_name: str = ""):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ø–æ—Å–æ–±–æ–≤ —Å–≤—è–∑–∏"""
        builder = InlineKeyboardBuilder()

        builder.button(text="üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="contact_both")
        builder.button(text="üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="contact_phone")
        builder.button(text="üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="contact_message")

        builder.adjust(1)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_size(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        builder = InlineKeyboardBuilder()

        # –†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã
        clothing_sizes = ["XS", "S", "M", "L", "XL", "XXL", "XXXL", "46", "48", "50", "52", "54", "56", "58"]
        # –†–∞–∑–º–µ—Ä—ã –æ–±—É–≤–∏
        shoe_sizes = ["35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46"]

        for size in clothing_sizes + shoe_sizes:
            builder.button(text=size, callback_data=f"size_{size}")

        builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä", callback_data="size_custom")
        builder.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="size_skip")

        builder.adjust(4)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_condition(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        builder = InlineKeyboardBuilder()

        conditions = [
            ("üÜï –ù–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π", "new_with_tag"),
            ("‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ", "excellent"),
            ("üëç –•–æ—Ä–æ—à–µ–µ", "good"),
            ("‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "satisfactory")
        ]

        for condition_name, condition_code in conditions:
            builder.button(text=condition_name, callback_data=f"condition_{condition_code}")

        builder.adjust(1)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_sale_type(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        builder = InlineKeyboardBuilder()

        sale_types = [
            ("üõí –¢–æ–≤–∞—Ä –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", "resale"),
            ("üè≠ –¢–æ–≤–∞—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è", "manufacturer"),
            ("üë§ –ü—Ä–æ–¥–∞—é —Å–≤–æ—ë", "personal")
        ]

        for sale_name, sale_code in sale_types:
            builder.button(text=sale_name, callback_data=f"saletype_{sale_code}")

        builder.adjust(1)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏:",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_placement_type(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        builder = InlineKeyboardBuilder()

        placement_types = [
            ("üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥–∞–º", "cities"),
            ("üöá –ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ", "metro")
        ]

        for placement_name, placement_code in placement_types:
            builder.button(text=placement_name, callback_data=f"placement_{placement_code}")

        builder.adjust(1)

        greeting = f"{user_name}, " if user_name else ""
        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
            reply_markup=builder.as_markup()
        )

    @staticmethod
    async def ask_start_date(message: Message, user_name: str = ""):
        """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        greeting = f"{user_name}, " if user_name else ""
        calendar = ProductCalendar()

        await message.answer(
            f"{greeting}–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏:\n\n"
            "üìÖ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ "
            "(–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏).",
            reply_markup=await calendar.start_calendar()
        )

    @staticmethod
    async def complete_product_creation(message: Message, state: FSMContext, user_name: str = ""):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
        from bot.handlers.base import StateManager

        try:
            data = await StateManager.get_data_safe(state)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['title', 'description', 'category', 'contact_phone']
            missing_fields = [field for field in required_fields if not data.get(field)]

            if missing_fields:
                await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
            from bot.database import db
            await db.add_product(message.from_user.id, data)

            await state.clear()
            await db.clear_user_state(message.from_user.id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            main_count = len(data.get('main_images', []))
            additional_count = len(data.get('additional_images', []))
            total_images = main_count + additional_count

            await message.answer(
                f"{user_name}, ‚úÖ —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title'][:50]}...\n"
                f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {len(data['description'])} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ç–æ: {main_count}\n"
                f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ: {additional_count}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {total_images}\n\n"
                f"üìä –ò—Ç–æ–≥: —Å–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä —Å {total_images} —Ñ–æ—Ç–æ\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/new_product - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n"
                f"/my_products - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n"
                f"/generate_xml - —Å–æ–∑–¥–∞—Ç—å XML —Ñ–∞–π–ª –¥–ª—è Avito"
            )

        except Exception as e:
            print(f"Error in complete_product_creation: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
