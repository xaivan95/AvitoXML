# bot/keyboards/builders.py
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from typing import List, Tuple, Optional


class KeyboardBuilder:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def create_inline_keyboard(
            buttons: List[Tuple[str, str]],
            adjust: int = 1,
            back_button: bool = False,
            back_callback: str = "back"
    ) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        builder = InlineKeyboardBuilder()

        for text, callback_data in buttons:
            builder.button(text=text, callback_data=callback_data)

        if back_button:
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)

        builder.adjust(adjust)
        return builder

    @staticmethod
    def create_simple_reply_keyboard(buttons: List[List[str]]) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard_buttons = []
        for row in buttons:
            keyboard_row = [KeyboardButton(text=text) for text in row]
            keyboard_buttons.append(keyboard_row)

        return ReplyKeyboardMarkup(
            keyboard=keyboard_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )

    @staticmethod
    def create_phone_keyboard() -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
                [KeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )


class ProductKeyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""

    @staticmethod
    def get_price_type_keyboard() -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–Ω—ã"""
        buttons = [
            ("üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", "price_fixed"),
            ("üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", "price_range"),
            ("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "price_skip")
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, adjust=1)

    @staticmethod
    def get_contact_methods_keyboard() -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
        buttons = [
            ("üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üí¨", "contact_both"),
            ("üìû –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", "contact_phone"),
            ("üí¨ –í —Å–æ–æ–±—â–µ–Ω–∏–∏", "contact_message")
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, adjust=1)

    @staticmethod
    def get_placement_type_keyboard() -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        buttons = [
            ("üèôÔ∏è –ü–æ –≥–æ—Ä–æ–¥–∞–º", "cities"),
            ("üöá –ü–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ", "metro")
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, adjust=1)

    @staticmethod
    def get_condition_keyboard() -> InlineKeyboardBuilder:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        buttons = [
            ("üÜï –ù–æ–≤–æ–µ —Å –±–∏—Ä–∫–æ–π", "condition_new_with_tag"),
            ("‚≠ê –û—Ç–ª–∏—á–Ω–æ–µ", "condition_excellent"),
            ("üëç –•–æ—Ä–æ—à–µ–µ", "condition_good"),
            ("‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "condition_satisfactory")
        ]
        return KeyboardBuilder.create_inline_keyboard(buttons, adjust=1)